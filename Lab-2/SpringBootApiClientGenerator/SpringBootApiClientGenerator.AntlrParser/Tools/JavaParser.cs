//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JavaParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JavaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ABSTRACT=1, ASSERT=2, BOOLEAN=3, BREAK=4, BYTE=5, CASE=6, CATCH=7, CHAR=8, 
		CLASS=9, CONST=10, CONTINUE=11, DEFAULT=12, DO=13, DOUBLE=14, ELSE=15, 
		ENUM=16, EXTENDS=17, FINAL=18, FINALLY=19, FLOAT=20, FOR=21, IF=22, GOTO=23, 
		IMPLEMENTS=24, IMPORT=25, INSTANCEOF=26, INT=27, INTERFACE=28, LONG=29, 
		NATIVE=30, NEW=31, PACKAGE=32, PRIVATE=33, PROTECTED=34, PUBLIC=35, RETURN=36, 
		SHORT=37, STATIC=38, STRICTFP=39, SUPER=40, SWITCH=41, SYNCHRONIZED=42, 
		THIS=43, THROW=44, THROWS=45, TRANSIENT=46, TRY=47, VOID=48, VOLATILE=49, 
		WHILE=50, MODULE=51, OPEN=52, REQUIRES=53, EXPORTS=54, OPENS=55, TO=56, 
		USES=57, PROVIDES=58, WITH=59, TRANSITIVE=60, VAR=61, YIELD=62, RECORD=63, 
		SEALED=64, PERMITS=65, NON_SEALED=66, DECIMAL_LITERAL=67, HEX_LITERAL=68, 
		OCT_LITERAL=69, BINARY_LITERAL=70, FLOAT_LITERAL=71, HEX_FLOAT_LITERAL=72, 
		BOOL_LITERAL=73, CHAR_LITERAL=74, STRING_LITERAL=75, TEXT_BLOCK=76, NULL_LITERAL=77, 
		LPAREN=78, RPAREN=79, LBRACE=80, RBRACE=81, LBRACK=82, RBRACK=83, SEMI=84, 
		COMMA=85, DOT=86, ASSIGN=87, GT=88, LT=89, BANG=90, TILDE=91, QUESTION=92, 
		COLON=93, EQUAL=94, LE=95, GE=96, NOTEQUAL=97, AND=98, OR=99, INC=100, 
		DEC=101, ADD=102, SUB=103, MUL=104, DIV=105, BITAND=106, BITOR=107, CARET=108, 
		MOD=109, ADD_ASSIGN=110, SUB_ASSIGN=111, MUL_ASSIGN=112, DIV_ASSIGN=113, 
		AND_ASSIGN=114, OR_ASSIGN=115, XOR_ASSIGN=116, MOD_ASSIGN=117, LSHIFT_ASSIGN=118, 
		RSHIFT_ASSIGN=119, URSHIFT_ASSIGN=120, ARROW=121, COLONCOLON=122, AT=123, 
		ELLIPSIS=124, WS=125, COMMENT=126, LINE_COMMENT=127, IDENTIFIER=128;
	public const int
		RULE_compilationUnit = 0, RULE_packageDeclaration = 1, RULE_importDeclaration = 2, 
		RULE_typeDeclaration = 3, RULE_modifier = 4, RULE_classOrInterfaceModifier = 5, 
		RULE_variableModifier = 6, RULE_classDeclaration = 7, RULE_typeParameters = 8, 
		RULE_typeParameter = 9, RULE_typeBound = 10, RULE_enumDeclaration = 11, 
		RULE_enumConstants = 12, RULE_enumConstant = 13, RULE_enumBodyDeclarations = 14, 
		RULE_interfaceDeclaration = 15, RULE_classBody = 16, RULE_interfaceBody = 17, 
		RULE_classBodyDeclaration = 18, RULE_memberDeclaration = 19, RULE_methodDeclaration = 20, 
		RULE_methodBody = 21, RULE_typeTypeOrVoid = 22, RULE_genericMethodDeclaration = 23, 
		RULE_genericConstructorDeclaration = 24, RULE_constructorDeclaration = 25, 
		RULE_fieldDeclaration = 26, RULE_interfaceBodyDeclaration = 27, RULE_interfaceMemberDeclaration = 28, 
		RULE_constDeclaration = 29, RULE_constantDeclarator = 30, RULE_interfaceMethodDeclaration = 31, 
		RULE_interfaceMethodModifier = 32, RULE_genericInterfaceMethodDeclaration = 33, 
		RULE_interfaceCommonBodyDeclaration = 34, RULE_variableDeclarators = 35, 
		RULE_variableDeclarator = 36, RULE_variableDeclaratorId = 37, RULE_variableInitializer = 38, 
		RULE_arrayInitializer = 39, RULE_classOrInterfaceType = 40, RULE_typeArgument = 41, 
		RULE_qualifiedNameList = 42, RULE_formalParameters = 43, RULE_receiverParameter = 44, 
		RULE_formalParameterList = 45, RULE_formalParameter = 46, RULE_lastFormalParameter = 47, 
		RULE_lambdaLVTIList = 48, RULE_lambdaLVTIParameter = 49, RULE_qualifiedName = 50, 
		RULE_literal = 51, RULE_integerLiteral = 52, RULE_floatLiteral = 53, RULE_altAnnotationQualifiedName = 54, 
		RULE_annotation = 55, RULE_elementValuePairs = 56, RULE_elementValuePair = 57, 
		RULE_elementValue = 58, RULE_elementValueArrayInitializer = 59, RULE_annotationTypeDeclaration = 60, 
		RULE_annotationTypeBody = 61, RULE_annotationTypeElementDeclaration = 62, 
		RULE_annotationTypeElementRest = 63, RULE_annotationMethodOrConstantRest = 64, 
		RULE_annotationMethodRest = 65, RULE_annotationConstantRest = 66, RULE_defaultValue = 67, 
		RULE_moduleDeclaration = 68, RULE_moduleBody = 69, RULE_moduleDirective = 70, 
		RULE_requiresModifier = 71, RULE_recordDeclaration = 72, RULE_recordHeader = 73, 
		RULE_recordComponentList = 74, RULE_recordComponent = 75, RULE_recordBody = 76, 
		RULE_block = 77, RULE_blockStatement = 78, RULE_localVariableDeclaration = 79, 
		RULE_identifier = 80, RULE_localTypeDeclaration = 81, RULE_statement = 82, 
		RULE_catchClause = 83, RULE_catchType = 84, RULE_finallyBlock = 85, RULE_resourceSpecification = 86, 
		RULE_resources = 87, RULE_resource = 88, RULE_switchBlockStatementGroup = 89, 
		RULE_switchLabel = 90, RULE_forControl = 91, RULE_forInit = 92, RULE_enhancedForControl = 93, 
		RULE_parExpression = 94, RULE_expressionList = 95, RULE_methodCall = 96, 
		RULE_expression = 97, RULE_pattern = 98, RULE_lambdaExpression = 99, RULE_lambdaParameters = 100, 
		RULE_lambdaBody = 101, RULE_primary = 102, RULE_switchExpression = 103, 
		RULE_switchLabeledRule = 104, RULE_guardedPattern = 105, RULE_switchRuleOutcome = 106, 
		RULE_classType = 107, RULE_creator = 108, RULE_createdName = 109, RULE_innerCreator = 110, 
		RULE_arrayCreatorRest = 111, RULE_classCreatorRest = 112, RULE_explicitGenericInvocation = 113, 
		RULE_typeArgumentsOrDiamond = 114, RULE_nonWildcardTypeArgumentsOrDiamond = 115, 
		RULE_nonWildcardTypeArguments = 116, RULE_typeList = 117, RULE_typeType = 118, 
		RULE_primitiveType = 119, RULE_typeArguments = 120, RULE_superSuffix = 121, 
		RULE_explicitGenericInvocationSuffix = 122, RULE_arguments = 123;
	public static readonly string[] ruleNames = {
		"compilationUnit", "packageDeclaration", "importDeclaration", "typeDeclaration", 
		"modifier", "classOrInterfaceModifier", "variableModifier", "classDeclaration", 
		"typeParameters", "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
		"enumConstant", "enumBodyDeclarations", "interfaceDeclaration", "classBody", 
		"interfaceBody", "classBodyDeclaration", "memberDeclaration", "methodDeclaration", 
		"methodBody", "typeTypeOrVoid", "genericMethodDeclaration", "genericConstructorDeclaration", 
		"constructorDeclaration", "fieldDeclaration", "interfaceBodyDeclaration", 
		"interfaceMemberDeclaration", "constDeclaration", "constantDeclarator", 
		"interfaceMethodDeclaration", "interfaceMethodModifier", "genericInterfaceMethodDeclaration", 
		"interfaceCommonBodyDeclaration", "variableDeclarators", "variableDeclarator", 
		"variableDeclaratorId", "variableInitializer", "arrayInitializer", "classOrInterfaceType", 
		"typeArgument", "qualifiedNameList", "formalParameters", "receiverParameter", 
		"formalParameterList", "formalParameter", "lastFormalParameter", "lambdaLVTIList", 
		"lambdaLVTIParameter", "qualifiedName", "literal", "integerLiteral", "floatLiteral", 
		"altAnnotationQualifiedName", "annotation", "elementValuePairs", "elementValuePair", 
		"elementValue", "elementValueArrayInitializer", "annotationTypeDeclaration", 
		"annotationTypeBody", "annotationTypeElementDeclaration", "annotationTypeElementRest", 
		"annotationMethodOrConstantRest", "annotationMethodRest", "annotationConstantRest", 
		"defaultValue", "moduleDeclaration", "moduleBody", "moduleDirective", 
		"requiresModifier", "recordDeclaration", "recordHeader", "recordComponentList", 
		"recordComponent", "recordBody", "block", "blockStatement", "localVariableDeclaration", 
		"identifier", "localTypeDeclaration", "statement", "catchClause", "catchType", 
		"finallyBlock", "resourceSpecification", "resources", "resource", "switchBlockStatementGroup", 
		"switchLabel", "forControl", "forInit", "enhancedForControl", "parExpression", 
		"expressionList", "methodCall", "expression", "pattern", "lambdaExpression", 
		"lambdaParameters", "lambdaBody", "primary", "switchExpression", "switchLabeledRule", 
		"guardedPattern", "switchRuleOutcome", "classType", "creator", "createdName", 
		"innerCreator", "arrayCreatorRest", "classCreatorRest", "explicitGenericInvocation", 
		"typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
		"typeList", "typeType", "primitiveType", "typeArguments", "superSuffix", 
		"explicitGenericInvocationSuffix", "arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
		"'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
		"'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", "'instanceof'", 
		"'int'", "'interface'", "'long'", "'native'", "'new'", "'package'", "'private'", 
		"'protected'", "'public'", "'return'", "'short'", "'static'", "'strictfp'", 
		"'super'", "'switch'", "'synchronized'", "'this'", "'throw'", "'throws'", 
		"'transient'", "'try'", "'void'", "'volatile'", "'while'", "'module'", 
		"'open'", "'requires'", "'exports'", "'opens'", "'to'", "'uses'", "'provides'", 
		"'with'", "'transitive'", "'var'", "'yield'", "'record'", "'sealed'", 
		"'permits'", "'non-sealed'", null, null, null, null, null, null, null, 
		null, null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", 
		"'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
		"'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", "'*='", 
		"'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", "'>>>='", "'->'", 
		"'::'", "'@'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
		"CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
		"ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", 
		"IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
		"PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", 
		"SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", 
		"TRY", "VOID", "VOLATILE", "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", 
		"OPENS", "TO", "USES", "PROVIDES", "WITH", "TRANSITIVE", "VAR", "YIELD", 
		"RECORD", "SEALED", "PERMITS", "NON_SEALED", "DECIMAL_LITERAL", "HEX_LITERAL", 
		"OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", 
		"BOOL_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
		"DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
		"LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
		"DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
		"MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
		"LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", "COLONCOLON", 
		"AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JavaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public ModuleDeclarationContext moduleDeclaration() {
			return GetRuleContext<ModuleDeclarationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(JavaParser.Eof, 0); }
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 248; packageDeclaration();
					}
					break;
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IMPORT) {
					{
					{
					State = 251; importDeclaration();
					}
					}
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (CLASS - 1)) | (1L << (ENUM - 1)) | (1L << (FINAL - 1)) | (1L << (INTERFACE - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (SEMI - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
					{
					{
					State = 257; typeDeclaration();
					}
					}
					State = 262;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263; moduleDeclaration();
				State = 264; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		public ITerminalNode PACKAGE() { return GetToken(JavaParser.PACKAGE, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_packageDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==AT || _la==IDENTIFIER) {
				{
				{
				State = 268; annotation();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274; Match(PACKAGE);
			State = 275; qualifiedName();
			State = 276; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(JavaParser.IMPORT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		public ITerminalNode DOT() { return GetToken(JavaParser.DOT, 0); }
		public ITerminalNode MUL() { return GetToken(JavaParser.MUL, 0); }
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(IMPORT);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 279; Match(STATIC);
				}
			}

			State = 282; qualifiedName();
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 283; Match(DOT);
				State = 284; Match(MUL);
				}
			}

			State = 287; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public RecordDeclarationContext recordDeclaration() {
			return GetRuleContext<RecordDeclarationContext>(0);
		}
		public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeDeclaration);
		try {
			int _alt;
			State = 303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case FINAL:
			case INTERFACE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case NON_SEALED:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 289; classOrInterfaceModifier();
						}
						} 
					}
					State = 294;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 300;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLASS:
					{
					State = 295; classDeclaration();
					}
					break;
				case ENUM:
					{
					State = 296; enumDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 297; interfaceDeclaration();
					}
					break;
				case AT:
					{
					State = 298; annotationTypeDeclaration();
					}
					break;
				case RECORD:
					{
					State = 299; recordDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
			return GetRuleContext<ClassOrInterfaceModifierContext>(0);
		}
		public ITerminalNode NATIVE() { return GetToken(JavaParser.NATIVE, 0); }
		public ITerminalNode SYNCHRONIZED() { return GetToken(JavaParser.SYNCHRONIZED, 0); }
		public ITerminalNode TRANSIENT() { return GetToken(JavaParser.TRANSIENT, 0); }
		public ITerminalNode VOLATILE() { return GetToken(JavaParser.VOLATILE, 0); }
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_modifier);
		try {
			State = 310;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case FINAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case NON_SEALED:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305; classOrInterfaceModifier();
				}
				break;
			case NATIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306; Match(NATIVE);
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 307; Match(SYNCHRONIZED);
				}
				break;
			case TRANSIENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 308; Match(TRANSIENT);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 309; Match(VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(JavaParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(JavaParser.PROTECTED, 0); }
		public ITerminalNode PRIVATE() { return GetToken(JavaParser.PRIVATE, 0); }
		public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(JavaParser.ABSTRACT, 0); }
		public ITerminalNode FINAL() { return GetToken(JavaParser.FINAL, 0); }
		public ITerminalNode STRICTFP() { return GetToken(JavaParser.STRICTFP, 0); }
		public ITerminalNode SEALED() { return GetToken(JavaParser.SEALED, 0); }
		public ITerminalNode NON_SEALED() { return GetToken(JavaParser.NON_SEALED, 0); }
		public ClassOrInterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceModifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
		ClassOrInterfaceModifierContext _localctx = new ClassOrInterfaceModifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_classOrInterfaceModifier);
		try {
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312; annotation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313; Match(PUBLIC);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 314; Match(PROTECTED);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 315; Match(PRIVATE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 316; Match(STATIC);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 317; Match(ABSTRACT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 318; Match(FINAL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 319; Match(STRICTFP);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 320; Match(SEALED);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 321; Match(NON_SEALED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		public ITerminalNode FINAL() { return GetToken(JavaParser.FINAL, 0); }
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableModifier);
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FINAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; Match(FINAL);
				}
				break;
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325; annotation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(JavaParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ITerminalNode EXTENDS() { return GetToken(JavaParser.EXTENDS, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(JavaParser.IMPLEMENTS, 0); }
		public TypeListContext[] typeList() {
			return GetRuleContexts<TypeListContext>();
		}
		public TypeListContext typeList(int i) {
			return GetRuleContext<TypeListContext>(i);
		}
		public ITerminalNode PERMITS() { return GetToken(JavaParser.PERMITS, 0); }
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(CLASS);
			State = 329; identifier();
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 330; typeParameters();
				}
			}

			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 333; Match(EXTENDS);
				State = 334; typeType();
				}
			}

			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 337; Match(IMPLEMENTS);
				State = 338; typeList();
				}
			}

			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERMITS) {
				{
				State = 341; Match(PERMITS);
				State = 342; typeList();
				}
			}

			State = 345; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(JavaParser.LT, 0); }
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public ITerminalNode GT() { return GetToken(JavaParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(LT);
			State = 348; typeParameter();
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 349; Match(COMMA);
				State = 350; typeParameter();
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 356; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode EXTENDS() { return GetToken(JavaParser.EXTENDS, 0); }
		public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 358; annotation();
					}
					} 
				}
				State = 363;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 364; identifier();
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 365; Match(EXTENDS);
				State = 369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 366; annotation();
						}
						} 
					}
					State = 371;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				}
				State = 372; typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		public ITerminalNode[] BITAND() { return GetTokens(JavaParser.BITAND); }
		public ITerminalNode BITAND(int i) {
			return GetToken(JavaParser.BITAND, i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; typeType();
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITAND) {
				{
				{
				State = 376; Match(BITAND);
				State = 377; typeType();
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(JavaParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(JavaParser.IMPLEMENTS, 0); }
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public EnumConstantsContext enumConstants() {
			return GetRuleContext<EnumConstantsContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(JavaParser.COMMA, 0); }
		public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(ENUM);
			State = 384; identifier();
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 385; Match(IMPLEMENTS);
				State = 386; typeList();
				}
			}

			State = 389; Match(LBRACE);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==AT || _la==IDENTIFIER) {
				{
				State = 390; enumConstants();
				}
			}

			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 393; Match(COMMA);
				}
			}

			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 396; enumBodyDeclarations();
				}
			}

			State = 399; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantsContext : ParserRuleContext {
		public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public EnumConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstants; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantsContext enumConstants() {
		EnumConstantsContext _localctx = new EnumConstantsContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumConstants);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; enumConstant();
			State = 406;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 402; Match(COMMA);
					State = 403; enumConstant();
					}
					} 
				}
				State = 408;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumConstant);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 409; annotation();
					}
					} 
				}
				State = 414;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 415; identifier();
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 416; arguments();
				}
			}

			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 419; classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBodyDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(SEMI);
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (DOUBLE - 1)) | (1L << (ENUM - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NATIVE - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (TRANSIENT - 1)) | (1L << (VOID - 1)) | (1L << (VOLATILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (LBRACE - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 423; classBodyDeclaration();
				}
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(JavaParser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ITerminalNode EXTENDS() { return GetToken(JavaParser.EXTENDS, 0); }
		public TypeListContext[] typeList() {
			return GetRuleContexts<TypeListContext>();
		}
		public TypeListContext typeList(int i) {
			return GetRuleContext<TypeListContext>(i);
		}
		public ITerminalNode PERMITS() { return GetToken(JavaParser.PERMITS, 0); }
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; Match(INTERFACE);
			State = 430; identifier();
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 431; typeParameters();
				}
			}

			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 434; Match(EXTENDS);
				State = 435; typeList();
				}
			}

			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERMITS) {
				{
				State = 438; Match(PERMITS);
				State = 439; typeList();
				}
			}

			State = 442; interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444; Match(LBRACE);
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (DOUBLE - 1)) | (1L << (ENUM - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NATIVE - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (TRANSIENT - 1)) | (1L << (VOID - 1)) | (1L << (VOLATILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (LBRACE - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 445; classBodyDeclaration();
				}
				}
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 451; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		public InterfaceBodyDeclarationContext[] interfaceBodyDeclaration() {
			return GetRuleContexts<InterfaceBodyDeclarationContext>();
		}
		public InterfaceBodyDeclarationContext interfaceBodyDeclaration(int i) {
			return GetRuleContext<InterfaceBodyDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453; Match(LBRACE);
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (DEFAULT - 1)) | (1L << (DOUBLE - 1)) | (1L << (ENUM - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NATIVE - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (TRANSIENT - 1)) | (1L << (VOID - 1)) | (1L << (VOLATILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 454; interfaceBodyDeclaration();
				}
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 460; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_classBodyDeclaration);
		int _la;
		try {
			int _alt;
			State = 474;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 462; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STATIC) {
					{
					State = 463; Match(STATIC);
					}
				}

				State = 466; block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 470;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 467; modifier();
						}
						} 
					}
					State = 472;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				}
				State = 473; memberDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GenericMethodDeclarationContext genericMethodDeclaration() {
			return GetRuleContext<GenericMethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public GenericConstructorDeclarationContext genericConstructorDeclaration() {
			return GetRuleContext<GenericConstructorDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public RecordDeclarationContext recordDeclaration() {
			return GetRuleContext<RecordDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_memberDeclaration);
		try {
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476; methodDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 477; genericMethodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 478; fieldDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 479; constructorDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 480; genericConstructorDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 481; interfaceDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 482; annotationTypeDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 483; classDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 484; enumDeclaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 485; recordDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(JavaParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(JavaParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParser.RBRACK, i);
		}
		public ITerminalNode THROWS() { return GetToken(JavaParser.THROWS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488; typeTypeOrVoid();
			State = 489; identifier();
			State = 490; formalParameters();
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 491; Match(LBRACK);
				State = 492; Match(RBRACK);
				}
				}
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 498; Match(THROWS);
				State = 499; qualifiedNameList();
				}
			}

			State = 502; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_methodBody);
		try {
			State = 506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeOrVoidContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(JavaParser.VOID, 0); }
		public TypeTypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTypeOrVoid; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTypeOrVoid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeOrVoidContext typeTypeOrVoid() {
		TypeTypeOrVoidContext _localctx = new TypeTypeOrVoidContext(Context, State);
		EnterRule(_localctx, 44, RULE_typeTypeOrVoid);
		try {
			State = 510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 508; typeType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 509; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericMethodDeclarationContext : ParserRuleContext {
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GenericMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericMethodDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericMethodDeclarationContext genericMethodDeclaration() {
		GenericMethodDeclarationContext _localctx = new GenericMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_genericMethodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512; typeParameters();
			State = 513; methodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstructorDeclarationContext : ParserRuleContext {
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public GenericConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstructorDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstructorDeclarationContext genericConstructorDeclaration() {
		GenericConstructorDeclarationContext _localctx = new GenericConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_genericConstructorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515; typeParameters();
			State = 516; constructorDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public BlockContext constructorBody;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode THROWS() { return GetToken(JavaParser.THROWS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518; identifier();
			State = 519; formalParameters();
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 520; Match(THROWS);
				State = 521; qualifiedNameList();
				}
			}

			State = 524; _localctx.constructorBody = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526; typeType();
			State = 527; variableDeclarators();
			State = 528; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyDeclarationContext : ParserRuleContext {
		public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
			return GetRuleContext<InterfaceMemberDeclarationContext>(0);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public InterfaceBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBodyDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyDeclarationContext interfaceBodyDeclaration() {
		InterfaceBodyDeclarationContext _localctx = new InterfaceBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_interfaceBodyDeclaration);
		try {
			int _alt;
			State = 538;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DEFAULT:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOID:
			case VOLATILE:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case NON_SEALED:
			case LT:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 530; modifier();
						}
						} 
					}
					State = 535;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				}
				State = 536; interfaceMemberDeclaration();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 537; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		public GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration() {
			return GetRuleContext<GenericInterfaceMethodDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public RecordDeclarationContext recordDeclaration() {
			return GetRuleContext<RecordDeclarationContext>(0);
		}
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_interfaceMemberDeclaration);
		try {
			State = 548;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 540; constDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 541; interfaceMethodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 542; genericInterfaceMethodDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 543; interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 544; annotationTypeDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 545; classDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 546; enumDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 547; recordDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ConstantDeclaratorContext[] constantDeclarator() {
			return GetRuleContexts<ConstantDeclaratorContext>();
		}
		public ConstantDeclaratorContext constantDeclarator(int i) {
			return GetRuleContext<ConstantDeclaratorContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_constDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550; typeType();
			State = 551; constantDeclarator();
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 552; Match(COMMA);
				State = 553; constantDeclarator();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 559; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JavaParser.ASSIGN, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(JavaParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(JavaParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParser.RBRACK, i);
		}
		public ConstantDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclarator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclaratorContext constantDeclarator() {
		ConstantDeclaratorContext _localctx = new ConstantDeclaratorContext(Context, State);
		EnterRule(_localctx, 60, RULE_constantDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; identifier();
			State = 566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 562; Match(LBRACK);
				State = 563; Match(RBRACK);
				}
				}
				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 569; Match(ASSIGN);
			State = 570; variableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclarationContext : ParserRuleContext {
		public InterfaceCommonBodyDeclarationContext interfaceCommonBodyDeclaration() {
			return GetRuleContext<InterfaceCommonBodyDeclarationContext>(0);
		}
		public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
		InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_interfaceMethodDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 572; interfaceMethodModifier();
					}
					} 
				}
				State = 577;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			State = 578; interfaceCommonBodyDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(JavaParser.PUBLIC, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(JavaParser.ABSTRACT, 0); }
		public ITerminalNode DEFAULT() { return GetToken(JavaParser.DEFAULT, 0); }
		public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		public ITerminalNode STRICTFP() { return GetToken(JavaParser.STRICTFP, 0); }
		public InterfaceMethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodModifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodModifierContext interfaceMethodModifier() {
		InterfaceMethodModifierContext _localctx = new InterfaceMethodModifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_interfaceMethodModifier);
		try {
			State = 586;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 580; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 581; Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 582; Match(ABSTRACT);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 583; Match(DEFAULT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 584; Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 585; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericInterfaceMethodDeclarationContext : ParserRuleContext {
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public InterfaceCommonBodyDeclarationContext interfaceCommonBodyDeclaration() {
			return GetRuleContext<InterfaceCommonBodyDeclarationContext>(0);
		}
		public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		public GenericInterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericInterfaceMethodDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration() {
		GenericInterfaceMethodDeclarationContext _localctx = new GenericInterfaceMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_genericInterfaceMethodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (DEFAULT - 1)) | (1L << (PUBLIC - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 588; interfaceMethodModifier();
				}
				}
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 594; typeParameters();
			State = 595; interfaceCommonBodyDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceCommonBodyDeclarationContext : ParserRuleContext {
		public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(JavaParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(JavaParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParser.RBRACK, i);
		}
		public ITerminalNode THROWS() { return GetToken(JavaParser.THROWS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public InterfaceCommonBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceCommonBodyDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceCommonBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceCommonBodyDeclarationContext interfaceCommonBodyDeclaration() {
		InterfaceCommonBodyDeclarationContext _localctx = new InterfaceCommonBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_interfaceCommonBodyDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 597; annotation();
					}
					} 
				}
				State = 602;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			State = 603; typeTypeOrVoid();
			State = 604; identifier();
			State = 605; formalParameters();
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 606; Match(LBRACK);
				State = 607; Match(RBRACK);
				}
				}
				State = 612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 613; Match(THROWS);
				State = 614; qualifiedNameList();
				}
			}

			State = 617; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 70, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619; variableDeclarator();
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 620; Match(COMMA);
				State = 621; variableDeclarator();
				}
				}
				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JavaParser.ASSIGN, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 72, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627; variableDeclaratorId();
			State = 630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 628; Match(ASSIGN);
				State = 629; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(JavaParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(JavaParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParser.RBRACK, i);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632; identifier();
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 633; Match(LBRACK);
				State = 634; Match(RBRACK);
				}
				}
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 76, RULE_variableInitializer);
		try {
			State = 642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 640; arrayInitializer();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case SWITCH:
			case THIS:
			case VOID:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case TEXT_BLOCK:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 641; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 78, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 644; Match(LBRACE);
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LBRACE - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				State = 645; variableInitializer();
				State = 650;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 646; Match(COMMA);
						State = 647; variableInitializer();
						}
						} 
					}
					State = 652;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				}
				State = 654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 653; Match(COMMA);
					}
				}

				}
			}

			State = 658; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(JavaParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(JavaParser.DOT, i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_classOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 660; identifier();
			State = 662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 661; typeArguments();
				}
				break;
			}
			State = 671;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 664; Match(DOT);
					State = 665; identifier();
					State = 667;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
					case 1:
						{
						State = 666; typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 673;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode QUESTION() { return GetToken(JavaParser.QUESTION, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode EXTENDS() { return GetToken(JavaParser.EXTENDS, 0); }
		public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeArgument);
		int _la;
		try {
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 674; typeType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 678;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					{
					State = 675; annotation();
					}
					}
					State = 680;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 681; Match(QUESTION);
				State = 684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTENDS || _la==SUPER) {
					{
					State = 682;
					_la = TokenStream.LA(1);
					if ( !(_la==EXTENDS || _la==SUPER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 683; typeType();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 84, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688; qualifiedName();
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 689; Match(COMMA);
				State = 690; qualifiedName();
				}
				}
				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public ReceiverParameterContext receiverParameter() {
			return GetRuleContext<ReceiverParameterContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(JavaParser.COMMA, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 86, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696; Match(LPAREN);
			State = 708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (SHORT - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					State = 697; receiverParameter();
					}
				}

				}
				break;
			case 2:
				{
				State = 700; receiverParameter();
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 701; Match(COMMA);
					State = 702; formalParameterList();
					}
				}

				}
				break;
			case 3:
				{
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FINAL - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (SHORT - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					State = 705; formalParameterList();
					}
				}

				}
				break;
			}
			State = 710; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(JavaParser.THIS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(JavaParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(JavaParser.DOT, i);
		}
		public ReceiverParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiverParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverParameterContext receiverParameter() {
		ReceiverParameterContext _localctx = new ReceiverParameterContext(Context, State);
		EnterRule(_localctx, 88, RULE_receiverParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; typeType();
			State = 718;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 713; identifier();
				State = 714; Match(DOT);
				}
				}
				State = 720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 721; Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 90, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 723; formalParameter();
				State = 728;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 724; Match(COMMA);
						State = 725; formalParameter();
						}
						} 
					}
					State = 730;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
				}
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 731; Match(COMMA);
					State = 732; lastFormalParameter();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 735; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 92, RULE_formalParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 738; variableModifier();
					}
					} 
				}
				State = 743;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			State = 744; typeType();
			State = 745; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode ELLIPSIS() { return GetToken(JavaParser.ELLIPSIS, 0); }
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(Context, State);
		EnterRule(_localctx, 94, RULE_lastFormalParameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 747; variableModifier();
					}
					} 
				}
				State = 752;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			State = 753; typeType();
			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==AT || _la==IDENTIFIER) {
				{
				{
				State = 754; annotation();
				}
				}
				State = 759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 760; Match(ELLIPSIS);
			State = 761; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaLVTIListContext : ParserRuleContext {
		public LambdaLVTIParameterContext[] lambdaLVTIParameter() {
			return GetRuleContexts<LambdaLVTIParameterContext>();
		}
		public LambdaLVTIParameterContext lambdaLVTIParameter(int i) {
			return GetRuleContext<LambdaLVTIParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public LambdaLVTIListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaLVTIList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaLVTIList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaLVTIListContext lambdaLVTIList() {
		LambdaLVTIListContext _localctx = new LambdaLVTIListContext(Context, State);
		EnterRule(_localctx, 96, RULE_lambdaLVTIList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763; lambdaLVTIParameter();
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 764; Match(COMMA);
				State = 765; lambdaLVTIParameter();
				}
				}
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaLVTIParameterContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(JavaParser.VAR, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LambdaLVTIParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaLVTIParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaLVTIParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaLVTIParameterContext lambdaLVTIParameter() {
		LambdaLVTIParameterContext _localctx = new LambdaLVTIParameterContext(Context, State);
		EnterRule(_localctx, 98, RULE_lambdaLVTIParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 771; variableModifier();
					}
					} 
				}
				State = 776;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			}
			State = 777; Match(VAR);
			State = 778; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(JavaParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(JavaParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 100, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 780; identifier();
			State = 785;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 781; Match(DOT);
					State = 782; identifier();
					}
					} 
				}
				State = 787;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public FloatLiteralContext floatLiteral() {
			return GetRuleContext<FloatLiteralContext>(0);
		}
		public ITerminalNode CHAR_LITERAL() { return GetToken(JavaParser.CHAR_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(JavaParser.STRING_LITERAL, 0); }
		public ITerminalNode BOOL_LITERAL() { return GetToken(JavaParser.BOOL_LITERAL, 0); }
		public ITerminalNode NULL_LITERAL() { return GetToken(JavaParser.NULL_LITERAL, 0); }
		public ITerminalNode TEXT_BLOCK() { return GetToken(JavaParser.TEXT_BLOCK, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 102, RULE_literal);
		try {
			State = 795;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 788; integerLiteral();
				}
				break;
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 789; floatLiteral();
				}
				break;
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 790; Match(CHAR_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 791; Match(STRING_LITERAL);
				}
				break;
			case BOOL_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 792; Match(BOOL_LITERAL);
				}
				break;
			case NULL_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 793; Match(NULL_LITERAL);
				}
				break;
			case TEXT_BLOCK:
				EnterOuterAlt(_localctx, 7);
				{
				State = 794; Match(TEXT_BLOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(JavaParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode HEX_LITERAL() { return GetToken(JavaParser.HEX_LITERAL, 0); }
		public ITerminalNode OCT_LITERAL() { return GetToken(JavaParser.OCT_LITERAL, 0); }
		public ITerminalNode BINARY_LITERAL() { return GetToken(JavaParser.BINARY_LITERAL, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 104, RULE_integerLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLiteralContext : ParserRuleContext {
		public ITerminalNode FLOAT_LITERAL() { return GetToken(JavaParser.FLOAT_LITERAL, 0); }
		public ITerminalNode HEX_FLOAT_LITERAL() { return GetToken(JavaParser.HEX_FLOAT_LITERAL, 0); }
		public FloatLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatLiteralContext floatLiteral() {
		FloatLiteralContext _localctx = new FloatLiteralContext(Context, State);
		EnterRule(_localctx, 106, RULE_floatLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT_LITERAL || _la==HEX_FLOAT_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltAnnotationQualifiedNameContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(JavaParser.AT, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(JavaParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(JavaParser.DOT, i);
		}
		public AltAnnotationQualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altAnnotationQualifiedName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltAnnotationQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltAnnotationQualifiedNameContext altAnnotationQualifiedName() {
		AltAnnotationQualifiedNameContext _localctx = new AltAnnotationQualifiedNameContext(Context, State);
		EnterRule(_localctx, 108, RULE_altAnnotationQualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 801; identifier();
				State = 802; Match(DOT);
				}
				}
				State = 808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 809; Match(AT);
			State = 810; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(JavaParser.AT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public AltAnnotationQualifiedNameContext altAnnotationQualifiedName() {
			return GetRuleContext<AltAnnotationQualifiedNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public ElementValuePairsContext elementValuePairs() {
			return GetRuleContext<ElementValuePairsContext>(0);
		}
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 110, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 812; Match(AT);
				State = 813; qualifiedName();
				}
				break;
			case 2:
				{
				State = 814; altAnnotationQualifiedName();
				}
				break;
			}
			State = 823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 817; Match(LPAREN);
				State = 820;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
				case 1:
					{
					State = 818; elementValuePairs();
					}
					break;
				case 2:
					{
					State = 819; elementValue();
					}
					break;
				}
				State = 822; Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairsContext : ParserRuleContext {
		public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public ElementValuePairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairsContext elementValuePairs() {
		ElementValuePairsContext _localctx = new ElementValuePairsContext(Context, State);
		EnterRule(_localctx, 112, RULE_elementValuePairs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825; elementValuePair();
			State = 830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 826; Match(COMMA);
				State = 827; elementValuePair();
				}
				}
				State = 832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JavaParser.ASSIGN, 0); }
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(Context, State);
		EnterRule(_localctx, 114, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833; identifier();
			State = 834; Match(ASSIGN);
			State = 835; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(Context, State);
		EnterRule(_localctx, 116, RULE_elementValue);
		try {
			State = 840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 837; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 838; annotation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 839; elementValueArrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(Context, State);
		EnterRule(_localctx, 118, RULE_elementValueArrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 842; Match(LBRACE);
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LBRACE - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				State = 843; elementValue();
				State = 848;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 844; Match(COMMA);
						State = 845; elementValue();
						}
						} 
					}
					State = 850;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
				}
				}
			}

			State = 854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 853; Match(COMMA);
				}
			}

			State = 856; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(JavaParser.AT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(JavaParser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 120, RULE_annotationTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858; Match(AT);
			State = 859; Match(INTERFACE);
			State = 860; identifier();
			State = 861; annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		public AnnotationTypeElementDeclarationContext[] annotationTypeElementDeclaration() {
			return GetRuleContexts<AnnotationTypeElementDeclarationContext>();
		}
		public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration(int i) {
			return GetRuleContext<AnnotationTypeElementDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(Context, State);
		EnterRule(_localctx, 122, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863; Match(LBRACE);
			State = 867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (DOUBLE - 1)) | (1L << (ENUM - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NATIVE - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (TRANSIENT - 1)) | (1L << (VOLATILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (SEMI - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 864; annotationTypeElementDeclaration();
				}
				}
				State = 869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 870; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementDeclarationContext : ParserRuleContext {
		public AnnotationTypeElementRestContext annotationTypeElementRest() {
			return GetRuleContext<AnnotationTypeElementRestContext>(0);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
		AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_annotationTypeElementDeclaration);
		try {
			int _alt;
			State = 880;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOLATILE:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case NON_SEALED:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 875;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 872; modifier();
						}
						} 
					}
					State = 877;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
				}
				State = 878; annotationTypeElementRest();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 879; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementRestContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() {
			return GetRuleContext<AnnotationMethodOrConstantRestContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public RecordDeclarationContext recordDeclaration() {
			return GetRuleContext<RecordDeclarationContext>(0);
		}
		public AnnotationTypeElementRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementRest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementRestContext annotationTypeElementRest() {
		AnnotationTypeElementRestContext _localctx = new AnnotationTypeElementRestContext(Context, State);
		EnterRule(_localctx, 126, RULE_annotationTypeElementRest);
		try {
			State = 906;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 882; typeType();
				State = 883; annotationMethodOrConstantRest();
				State = 884; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 886; classDeclaration();
				State = 888;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 887; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 890; interfaceDeclaration();
				State = 892;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 891; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 894; enumDeclaration();
				State = 896;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
				case 1:
					{
					State = 895; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 898; annotationTypeDeclaration();
				State = 900;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
				case 1:
					{
					State = 899; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 902; recordDeclaration();
				State = 904;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 903; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationMethodOrConstantRestContext : ParserRuleContext {
		public AnnotationMethodRestContext annotationMethodRest() {
			return GetRuleContext<AnnotationMethodRestContext>(0);
		}
		public AnnotationConstantRestContext annotationConstantRest() {
			return GetRuleContext<AnnotationConstantRestContext>(0);
		}
		public AnnotationMethodOrConstantRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationMethodOrConstantRest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationMethodOrConstantRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() {
		AnnotationMethodOrConstantRestContext _localctx = new AnnotationMethodOrConstantRestContext(Context, State);
		EnterRule(_localctx, 128, RULE_annotationMethodOrConstantRest);
		try {
			State = 910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 908; annotationMethodRest();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 909; annotationConstantRest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationMethodRestContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationMethodRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationMethodRest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationMethodRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationMethodRestContext annotationMethodRest() {
		AnnotationMethodRestContext _localctx = new AnnotationMethodRestContext(Context, State);
		EnterRule(_localctx, 130, RULE_annotationMethodRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912; identifier();
			State = 913; Match(LPAREN);
			State = 914; Match(RPAREN);
			State = 916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 915; defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationConstantRestContext : ParserRuleContext {
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public AnnotationConstantRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationConstantRest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationConstantRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationConstantRestContext annotationConstantRest() {
		AnnotationConstantRestContext _localctx = new AnnotationConstantRestContext(Context, State);
		EnterRule(_localctx, 132, RULE_annotationConstantRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918; variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(JavaParser.DEFAULT, 0); }
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 134, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920; Match(DEFAULT);
			State = 921; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationContext : ParserRuleContext {
		public ITerminalNode MODULE() { return GetToken(JavaParser.MODULE, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(JavaParser.OPEN, 0); }
		public ModuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationContext moduleDeclaration() {
		ModuleDeclarationContext _localctx = new ModuleDeclarationContext(Context, State);
		EnterRule(_localctx, 136, RULE_moduleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 923; Match(OPEN);
				}
			}

			State = 926; Match(MODULE);
			State = 927; qualifiedName();
			State = 928; moduleBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		public ModuleDirectiveContext[] moduleDirective() {
			return GetRuleContexts<ModuleDirectiveContext>();
		}
		public ModuleDirectiveContext moduleDirective(int i) {
			return GetRuleContext<ModuleDirectiveContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(Context, State);
		EnterRule(_localctx, 138, RULE_moduleBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930; Match(LBRACE);
			State = 934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REQUIRES) | (1L << EXPORTS) | (1L << OPENS) | (1L << USES) | (1L << PROVIDES))) != 0)) {
				{
				{
				State = 931; moduleDirective();
				}
				}
				State = 936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 937; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDirectiveContext : ParserRuleContext {
		public ITerminalNode REQUIRES() { return GetToken(JavaParser.REQUIRES, 0); }
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public RequiresModifierContext[] requiresModifier() {
			return GetRuleContexts<RequiresModifierContext>();
		}
		public RequiresModifierContext requiresModifier(int i) {
			return GetRuleContext<RequiresModifierContext>(i);
		}
		public ITerminalNode EXPORTS() { return GetToken(JavaParser.EXPORTS, 0); }
		public ITerminalNode TO() { return GetToken(JavaParser.TO, 0); }
		public ITerminalNode OPENS() { return GetToken(JavaParser.OPENS, 0); }
		public ITerminalNode USES() { return GetToken(JavaParser.USES, 0); }
		public ITerminalNode PROVIDES() { return GetToken(JavaParser.PROVIDES, 0); }
		public ITerminalNode WITH() { return GetToken(JavaParser.WITH, 0); }
		public ModuleDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDirective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDirectiveContext moduleDirective() {
		ModuleDirectiveContext _localctx = new ModuleDirectiveContext(Context, State);
		EnterRule(_localctx, 140, RULE_moduleDirective);
		int _la;
		try {
			int _alt;
			State = 975;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 939; Match(REQUIRES);
				State = 943;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 940; requiresModifier();
						}
						} 
					}
					State = 945;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				}
				State = 946; qualifiedName();
				State = 947; Match(SEMI);
				}
				break;
			case EXPORTS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 949; Match(EXPORTS);
				State = 950; qualifiedName();
				State = 953;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 951; Match(TO);
					State = 952; qualifiedName();
					}
				}

				State = 955; Match(SEMI);
				}
				break;
			case OPENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 957; Match(OPENS);
				State = 958; qualifiedName();
				State = 961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 959; Match(TO);
					State = 960; qualifiedName();
					}
				}

				State = 963; Match(SEMI);
				}
				break;
			case USES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 965; Match(USES);
				State = 966; qualifiedName();
				State = 967; Match(SEMI);
				}
				break;
			case PROVIDES:
				EnterOuterAlt(_localctx, 5);
				{
				State = 969; Match(PROVIDES);
				State = 970; qualifiedName();
				State = 971; Match(WITH);
				State = 972; qualifiedName();
				State = 973; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiresModifierContext : ParserRuleContext {
		public ITerminalNode TRANSITIVE() { return GetToken(JavaParser.TRANSITIVE, 0); }
		public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		public RequiresModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiresModifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiresModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiresModifierContext requiresModifier() {
		RequiresModifierContext _localctx = new RequiresModifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_requiresModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977;
			_la = TokenStream.LA(1);
			if ( !(_la==STATIC || _la==TRANSITIVE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordDeclarationContext : ParserRuleContext {
		public ITerminalNode RECORD() { return GetToken(JavaParser.RECORD, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RecordHeaderContext recordHeader() {
			return GetRuleContext<RecordHeaderContext>(0);
		}
		public RecordBodyContext recordBody() {
			return GetRuleContext<RecordBodyContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(JavaParser.IMPLEMENTS, 0); }
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public RecordDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordDeclarationContext recordDeclaration() {
		RecordDeclarationContext _localctx = new RecordDeclarationContext(Context, State);
		EnterRule(_localctx, 144, RULE_recordDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979; Match(RECORD);
			State = 980; identifier();
			State = 982;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 981; typeParameters();
				}
			}

			State = 984; recordHeader();
			State = 987;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 985; Match(IMPLEMENTS);
				State = 986; typeList();
				}
			}

			State = 989; recordBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordHeaderContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public RecordComponentListContext recordComponentList() {
			return GetRuleContext<RecordComponentListContext>(0);
		}
		public RecordHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordHeader; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordHeaderContext recordHeader() {
		RecordHeaderContext _localctx = new RecordHeaderContext(Context, State);
		EnterRule(_localctx, 146, RULE_recordHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 991; Match(LPAREN);
			State = 993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (SHORT - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || _la==AT || _la==IDENTIFIER) {
				{
				State = 992; recordComponentList();
				}
			}

			State = 995; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordComponentListContext : ParserRuleContext {
		public RecordComponentContext[] recordComponent() {
			return GetRuleContexts<RecordComponentContext>();
		}
		public RecordComponentContext recordComponent(int i) {
			return GetRuleContext<RecordComponentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public RecordComponentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordComponentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordComponentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordComponentListContext recordComponentList() {
		RecordComponentListContext _localctx = new RecordComponentListContext(Context, State);
		EnterRule(_localctx, 148, RULE_recordComponentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 997; recordComponent();
			State = 1002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 998; Match(COMMA);
				State = 999; recordComponent();
				}
				}
				State = 1004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordComponentContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RecordComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordComponent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordComponentContext recordComponent() {
		RecordComponentContext _localctx = new RecordComponentContext(Context, State);
		EnterRule(_localctx, 150, RULE_recordComponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005; typeType();
			State = 1006; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordBodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public RecordBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordBodyContext recordBody() {
		RecordBodyContext _localctx = new RecordBodyContext(Context, State);
		EnterRule(_localctx, 152, RULE_recordBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008; Match(LBRACE);
			State = 1012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (DOUBLE - 1)) | (1L << (ENUM - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NATIVE - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (TRANSIENT - 1)) | (1L << (VOID - 1)) | (1L << (VOLATILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (LBRACE - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 1009; classBodyDeclaration();
				}
				}
				State = 1014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1015; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 154, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1017; Match(LBRACE);
			State = 1021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (ASSERT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BREAK - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (CONTINUE - 1)) | (1L << (DO - 1)) | (1L << (DOUBLE - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (FOR - 1)) | (1L << (IF - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NEW - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (RETURN - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SUPER - 1)) | (1L << (SWITCH - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (THIS - 1)) | (1L << (THROW - 1)) | (1L << (TRY - 1)) | (1L << (VOID - 1)) | (1L << (WHILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (DECIMAL_LITERAL - 65)) | (1L << (HEX_LITERAL - 65)) | (1L << (OCT_LITERAL - 65)) | (1L << (BINARY_LITERAL - 65)) | (1L << (FLOAT_LITERAL - 65)) | (1L << (HEX_FLOAT_LITERAL - 65)) | (1L << (BOOL_LITERAL - 65)) | (1L << (CHAR_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (TEXT_BLOCK - 65)) | (1L << (NULL_LITERAL - 65)) | (1L << (LPAREN - 65)) | (1L << (LBRACE - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (BANG - 65)) | (1L << (TILDE - 65)) | (1L << (INC - 65)) | (1L << (DEC - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 1018; blockStatement();
				}
				}
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1024; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LocalTypeDeclarationContext localTypeDeclaration() {
			return GetRuleContext<LocalTypeDeclarationContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_blockStatement);
		try {
			State = 1031;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1026; localVariableDeclaration();
				State = 1027; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1029; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1030; localTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(JavaParser.VAR, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JavaParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 158, RULE_localVariableDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1033; variableModifier();
					}
					} 
				}
				State = 1038;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			State = 1047;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 1039; typeType();
				State = 1040; variableDeclarators();
				}
				break;
			case 2:
				{
				State = 1042; Match(VAR);
				State = 1043; identifier();
				State = 1044; Match(ASSIGN);
				State = 1045; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public ITerminalNode MODULE() { return GetToken(JavaParser.MODULE, 0); }
		public ITerminalNode OPEN() { return GetToken(JavaParser.OPEN, 0); }
		public ITerminalNode REQUIRES() { return GetToken(JavaParser.REQUIRES, 0); }
		public ITerminalNode EXPORTS() { return GetToken(JavaParser.EXPORTS, 0); }
		public ITerminalNode OPENS() { return GetToken(JavaParser.OPENS, 0); }
		public ITerminalNode TO() { return GetToken(JavaParser.TO, 0); }
		public ITerminalNode USES() { return GetToken(JavaParser.USES, 0); }
		public ITerminalNode PROVIDES() { return GetToken(JavaParser.PROVIDES, 0); }
		public ITerminalNode WITH() { return GetToken(JavaParser.WITH, 0); }
		public ITerminalNode TRANSITIVE() { return GetToken(JavaParser.TRANSITIVE, 0); }
		public ITerminalNode YIELD() { return GetToken(JavaParser.YIELD, 0); }
		public ITerminalNode SEALED() { return GetToken(JavaParser.SEALED, 0); }
		public ITerminalNode PERMITS() { return GetToken(JavaParser.PERMITS, 0); }
		public ITerminalNode RECORD() { return GetToken(JavaParser.RECORD, 0); }
		public ITerminalNode VAR() { return GetToken(JavaParser.VAR, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 160, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1049;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalTypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public RecordDeclarationContext recordDeclaration() {
			return GetRuleContext<RecordDeclarationContext>(0);
		}
		public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public LocalTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localTypeDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalTypeDeclarationContext localTypeDeclaration() {
		LocalTypeDeclarationContext _localctx = new LocalTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 162, RULE_localTypeDeclaration);
		try {
			int _alt;
			State = 1063;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case CLASS:
			case FINAL:
			case INTERFACE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case NON_SEALED:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1054;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1051; classOrInterfaceModifier();
						}
						} 
					}
					State = 1056;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
				}
				State = 1060;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLASS:
					{
					State = 1057; classDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 1058; interfaceDeclaration();
					}
					break;
				case RECORD:
					{
					State = 1059; recordDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1062; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext blockLabel;
		public ExpressionContext statementExpression;
		public IdentifierContext identifierLabel;
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode ASSERT() { return GetToken(JavaParser.ASSERT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public ITerminalNode COLON() { return GetToken(JavaParser.COLON, 0); }
		public ITerminalNode IF() { return GetToken(JavaParser.IF, 0); }
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(JavaParser.ELSE, 0); }
		public ITerminalNode FOR() { return GetToken(JavaParser.FOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public ITerminalNode WHILE() { return GetToken(JavaParser.WHILE, 0); }
		public ITerminalNode DO() { return GetToken(JavaParser.DO, 0); }
		public ITerminalNode TRY() { return GetToken(JavaParser.TRY, 0); }
		public FinallyBlockContext finallyBlock() {
			return GetRuleContext<FinallyBlockContext>(0);
		}
		public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public ResourceSpecificationContext resourceSpecification() {
			return GetRuleContext<ResourceSpecificationContext>(0);
		}
		public ITerminalNode SWITCH() { return GetToken(JavaParser.SWITCH, 0); }
		public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public ITerminalNode SYNCHRONIZED() { return GetToken(JavaParser.SYNCHRONIZED, 0); }
		public ITerminalNode RETURN() { return GetToken(JavaParser.RETURN, 0); }
		public ITerminalNode THROW() { return GetToken(JavaParser.THROW, 0); }
		public ITerminalNode BREAK() { return GetToken(JavaParser.BREAK, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CONTINUE() { return GetToken(JavaParser.CONTINUE, 0); }
		public ITerminalNode YIELD() { return GetToken(JavaParser.YIELD, 0); }
		public SwitchExpressionContext switchExpression() {
			return GetRuleContext<SwitchExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 1178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1065; _localctx.blockLabel = block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1066; Match(ASSERT);
				State = 1067; expression(0);
				State = 1070;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 1068; Match(COLON);
					State = 1069; expression(0);
					}
				}

				State = 1072; Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1074; Match(IF);
				State = 1075; parExpression();
				State = 1076; statement();
				State = 1079;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
				case 1:
					{
					State = 1077; Match(ELSE);
					State = 1078; statement();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1081; Match(FOR);
				State = 1082; Match(LPAREN);
				State = 1083; forControl();
				State = 1084; Match(RPAREN);
				State = 1085; statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1087; Match(WHILE);
				State = 1088; parExpression();
				State = 1089; statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1091; Match(DO);
				State = 1092; statement();
				State = 1093; Match(WHILE);
				State = 1094; parExpression();
				State = 1095; Match(SEMI);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1097; Match(TRY);
				State = 1098; block();
				State = 1108;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CATCH:
					{
					State = 1100;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 1099; catchClause();
						}
						}
						State = 1102;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==CATCH );
					State = 1105;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FINALLY) {
						{
						State = 1104; finallyBlock();
						}
					}

					}
					break;
				case FINALLY:
					{
					State = 1107; finallyBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1110; Match(TRY);
				State = 1111; resourceSpecification();
				State = 1112; block();
				State = 1116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CATCH) {
					{
					{
					State = 1113; catchClause();
					}
					}
					State = 1118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FINALLY) {
					{
					State = 1119; finallyBlock();
					}
				}

				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1122; Match(SWITCH);
				State = 1123; parExpression();
				State = 1124; Match(LBRACE);
				State = 1128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1125; switchBlockStatementGroup();
						}
						} 
					}
					State = 1130;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				}
				State = 1134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 1131; switchLabel();
					}
					}
					State = 1136;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1137; Match(RBRACE);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1139; Match(SYNCHRONIZED);
				State = 1140; parExpression();
				State = 1141; block();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1143; Match(RETURN);
				State = 1145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1144; expression(0);
					}
				}

				State = 1147; Match(SEMI);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1148; Match(THROW);
				State = 1149; expression(0);
				State = 1150; Match(SEMI);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1152; Match(BREAK);
				State = 1154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==IDENTIFIER) {
					{
					State = 1153; identifier();
					}
				}

				State = 1156; Match(SEMI);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1157; Match(CONTINUE);
				State = 1159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==IDENTIFIER) {
					{
					State = 1158; identifier();
					}
				}

				State = 1161; Match(SEMI);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1162; Match(YIELD);
				State = 1163; expression(0);
				State = 1164; Match(SEMI);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1166; Match(SEMI);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1167; _localctx.statementExpression = expression(0);
				State = 1168; Match(SEMI);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1170; switchExpression();
				State = 1172;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
				case 1:
					{
					State = 1171; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1174; _localctx.identifierLabel = identifier();
				State = 1175; Match(COLON);
				State = 1176; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(JavaParser.CATCH, 0); }
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public CatchTypeContext catchType() {
			return GetRuleContext<CatchTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 166, RULE_catchClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180; Match(CATCH);
			State = 1181; Match(LPAREN);
			State = 1185;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1182; variableModifier();
					}
					} 
				}
				State = 1187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			}
			State = 1188; catchType();
			State = 1189; identifier();
			State = 1190; Match(RPAREN);
			State = 1191; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchTypeContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] BITOR() { return GetTokens(JavaParser.BITOR); }
		public ITerminalNode BITOR(int i) {
			return GetToken(JavaParser.BITOR, i);
		}
		public CatchTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchTypeContext catchType() {
		CatchTypeContext _localctx = new CatchTypeContext(Context, State);
		EnterRule(_localctx, 168, RULE_catchType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193; qualifiedName();
			State = 1198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITOR) {
				{
				{
				State = 1194; Match(BITOR);
				State = 1195; qualifiedName();
				}
				}
				State = 1200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyBlockContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(JavaParser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyBlockContext finallyBlock() {
		FinallyBlockContext _localctx = new FinallyBlockContext(Context, State);
		EnterRule(_localctx, 170, RULE_finallyBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1201; Match(FINALLY);
			State = 1202; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceSpecificationContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public ResourcesContext resources() {
			return GetRuleContext<ResourcesContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public ResourceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceSpecification; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceSpecificationContext resourceSpecification() {
		ResourceSpecificationContext _localctx = new ResourceSpecificationContext(Context, State);
		EnterRule(_localctx, 172, RULE_resourceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1204; Match(LPAREN);
			State = 1205; resources();
			State = 1207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 1206; Match(SEMI);
				}
			}

			State = 1209; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourcesContext : ParserRuleContext {
		public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(JavaParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(JavaParser.SEMI, i);
		}
		public ResourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resources; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourcesContext resources() {
		ResourcesContext _localctx = new ResourcesContext(Context, State);
		EnterRule(_localctx, 174, RULE_resources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1211; resource();
			State = 1216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1212; Match(SEMI);
					State = 1213; resource();
					}
					} 
				}
				State = 1218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(JavaParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(JavaParser.VAR, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 176, RULE_resource);
		try {
			int _alt;
			State = 1236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1219; variableModifier();
						}
						} 
					}
					State = 1224;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				}
				State = 1230;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
				case 1:
					{
					State = 1225; classOrInterfaceType();
					State = 1226; variableDeclaratorId();
					}
					break;
				case 2:
					{
					State = 1228; Match(VAR);
					State = 1229; identifier();
					}
					break;
				}
				State = 1232; Match(ASSIGN);
				State = 1233; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1235; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlockStatementGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 178, RULE_switchBlockStatementGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1238; switchLabel();
				}
				}
				State = 1241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 1244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1243; blockStatement();
				}
				}
				State = 1246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (ASSERT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BREAK - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (CONTINUE - 1)) | (1L << (DO - 1)) | (1L << (DOUBLE - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (FOR - 1)) | (1L << (IF - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NEW - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (RETURN - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SUPER - 1)) | (1L << (SWITCH - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (THIS - 1)) | (1L << (THROW - 1)) | (1L << (TRY - 1)) | (1L << (VOID - 1)) | (1L << (WHILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (DECIMAL_LITERAL - 65)) | (1L << (HEX_LITERAL - 65)) | (1L << (OCT_LITERAL - 65)) | (1L << (BINARY_LITERAL - 65)) | (1L << (FLOAT_LITERAL - 65)) | (1L << (HEX_FLOAT_LITERAL - 65)) | (1L << (BOOL_LITERAL - 65)) | (1L << (CHAR_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (TEXT_BLOCK - 65)) | (1L << (NULL_LITERAL - 65)) | (1L << (LPAREN - 65)) | (1L << (LBRACE - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (BANG - 65)) | (1L << (TILDE - 65)) | (1L << (INC - 65)) | (1L << (DEC - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ExpressionContext constantExpression;
		public IToken enumConstantName;
		public IdentifierContext varName;
		public ITerminalNode CASE() { return GetToken(JavaParser.CASE, 0); }
		public ITerminalNode COLON() { return GetToken(JavaParser.COLON, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(JavaParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 180, RULE_switchLabel);
		try {
			State = 1259;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1248; Match(CASE);
				State = 1254;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
				case 1:
					{
					State = 1249; _localctx.constantExpression = expression(0);
					}
					break;
				case 2:
					{
					State = 1250; _localctx.enumConstantName = Match(IDENTIFIER);
					}
					break;
				case 3:
					{
					State = 1251; typeType();
					State = 1252; _localctx.varName = identifier();
					}
					break;
				}
				State = 1256; Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1257; Match(DEFAULT);
				State = 1258; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ExpressionListContext forUpdate;
		public EnhancedForControlContext enhancedForControl() {
			return GetRuleContext<EnhancedForControlContext>(0);
		}
		public ITerminalNode[] SEMI() { return GetTokens(JavaParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(JavaParser.SEMI, i);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 182, RULE_forControl);
		int _la;
		try {
			State = 1273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1261; enhancedForControl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FINAL - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1262; forInit();
					}
				}

				State = 1265; Match(SEMI);
				State = 1267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1266; expression(0);
					}
				}

				State = 1269; Match(SEMI);
				State = 1271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1270; _localctx.forUpdate = expressionList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 184, RULE_forInit);
		try {
			State = 1277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1275; localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1276; expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForControlContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(JavaParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(JavaParser.VAR, 0); }
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForControlContext enhancedForControl() {
		EnhancedForControlContext _localctx = new EnhancedForControlContext(Context, State);
		EnterRule(_localctx, 186, RULE_enhancedForControl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1282;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1279; variableModifier();
					}
					} 
				}
				State = 1284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			State = 1287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				{
				State = 1285; typeType();
				}
				break;
			case 2:
				{
				State = 1286; Match(VAR);
				}
				break;
			}
			State = 1289; variableDeclaratorId();
			State = 1290; Match(COLON);
			State = 1291; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(Context, State);
		EnterRule(_localctx, 188, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293; Match(LPAREN);
			State = 1294; expression(0);
			State = 1295; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 190, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1297; expression(0);
			State = 1302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1298; Match(COMMA);
				State = 1299; expression(0);
				}
				}
				State = 1304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(JavaParser.THIS, 0); }
		public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 192, RULE_methodCall);
		int _la;
		try {
			State = 1324;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1305; identifier();
				State = 1306; Match(LPAREN);
				State = 1308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1307; expressionList();
					}
				}

				State = 1310; Match(RPAREN);
				}
				break;
			case THIS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1312; Match(THIS);
				State = 1313; Match(LPAREN);
				State = 1315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1314; expressionList();
					}
				}

				State = 1317; Match(RPAREN);
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1318; Match(SUPER);
				State = 1319; Match(LPAREN);
				State = 1321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1320; expressionList();
					}
				}

				State = 1323; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken bop;
		public IToken postfix;
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(JavaParser.NEW, 0); }
		public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode[] BITAND() { return GetTokens(JavaParser.BITAND); }
		public ITerminalNode BITAND(int i) {
			return GetToken(JavaParser.BITAND, i);
		}
		public ITerminalNode ADD() { return GetToken(JavaParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(JavaParser.SUB, 0); }
		public ITerminalNode INC() { return GetToken(JavaParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(JavaParser.DEC, 0); }
		public ITerminalNode TILDE() { return GetToken(JavaParser.TILDE, 0); }
		public ITerminalNode BANG() { return GetToken(JavaParser.BANG, 0); }
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public SwitchExpressionContext switchExpression() {
			return GetRuleContext<SwitchExpressionContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(JavaParser.COLONCOLON, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(JavaParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(JavaParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(JavaParser.MOD, 0); }
		public ITerminalNode[] LT() { return GetTokens(JavaParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(JavaParser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(JavaParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(JavaParser.GT, i);
		}
		public ITerminalNode LE() { return GetToken(JavaParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(JavaParser.GE, 0); }
		public ITerminalNode EQUAL() { return GetToken(JavaParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(JavaParser.NOTEQUAL, 0); }
		public ITerminalNode CARET() { return GetToken(JavaParser.CARET, 0); }
		public ITerminalNode BITOR() { return GetToken(JavaParser.BITOR, 0); }
		public ITerminalNode AND() { return GetToken(JavaParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(JavaParser.OR, 0); }
		public ITerminalNode COLON() { return GetToken(JavaParser.COLON, 0); }
		public ITerminalNode QUESTION() { return GetToken(JavaParser.QUESTION, 0); }
		public ITerminalNode ASSIGN() { return GetToken(JavaParser.ASSIGN, 0); }
		public ITerminalNode ADD_ASSIGN() { return GetToken(JavaParser.ADD_ASSIGN, 0); }
		public ITerminalNode SUB_ASSIGN() { return GetToken(JavaParser.SUB_ASSIGN, 0); }
		public ITerminalNode MUL_ASSIGN() { return GetToken(JavaParser.MUL_ASSIGN, 0); }
		public ITerminalNode DIV_ASSIGN() { return GetToken(JavaParser.DIV_ASSIGN, 0); }
		public ITerminalNode AND_ASSIGN() { return GetToken(JavaParser.AND_ASSIGN, 0); }
		public ITerminalNode OR_ASSIGN() { return GetToken(JavaParser.OR_ASSIGN, 0); }
		public ITerminalNode XOR_ASSIGN() { return GetToken(JavaParser.XOR_ASSIGN, 0); }
		public ITerminalNode RSHIFT_ASSIGN() { return GetToken(JavaParser.RSHIFT_ASSIGN, 0); }
		public ITerminalNode URSHIFT_ASSIGN() { return GetToken(JavaParser.URSHIFT_ASSIGN, 0); }
		public ITerminalNode LSHIFT_ASSIGN() { return GetToken(JavaParser.LSHIFT_ASSIGN, 0); }
		public ITerminalNode MOD_ASSIGN() { return GetToken(JavaParser.MOD_ASSIGN, 0); }
		public ITerminalNode DOT() { return GetToken(JavaParser.DOT, 0); }
		public ITerminalNode THIS() { return GetToken(JavaParser.THIS, 0); }
		public InnerCreatorContext innerCreator() {
			return GetRuleContext<InnerCreatorContext>(0);
		}
		public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		public ExplicitGenericInvocationContext explicitGenericInvocation() {
			return GetRuleContext<ExplicitGenericInvocationContext>(0);
		}
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ITerminalNode LBRACK() { return GetToken(JavaParser.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(JavaParser.RBRACK, 0); }
		public ITerminalNode INSTANCEOF() { return GetToken(JavaParser.INSTANCEOF, 0); }
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 194;
		EnterRecursionRule(_localctx, 194, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 1327; primary();
				}
				break;
			case 2:
				{
				State = 1328; methodCall();
				}
				break;
			case 3:
				{
				State = 1329; Match(NEW);
				State = 1330; creator();
				}
				break;
			case 4:
				{
				State = 1331; Match(LPAREN);
				State = 1335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1332; annotation();
						}
						} 
					}
					State = 1337;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
				}
				State = 1338; typeType();
				State = 1343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 1339; Match(BITAND);
					State = 1340; typeType();
					}
					}
					State = 1345;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1346; Match(RPAREN);
				State = 1347; expression(22);
				}
				break;
			case 5:
				{
				State = 1349;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INC - 100)) | (1L << (DEC - 100)) | (1L << (ADD - 100)) | (1L << (SUB - 100)))) != 0)) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1350; expression(20);
				}
				break;
			case 6:
				{
				State = 1351;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BANG || _la==TILDE) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1352; expression(19);
				}
				break;
			case 7:
				{
				State = 1353; lambdaExpression();
				}
				break;
			case 8:
				{
				State = 1354; switchExpression();
				}
				break;
			case 9:
				{
				State = 1355; typeType();
				State = 1356; Match(COLONCOLON);
				State = 1362;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MODULE:
				case OPEN:
				case REQUIRES:
				case EXPORTS:
				case OPENS:
				case TO:
				case USES:
				case PROVIDES:
				case WITH:
				case TRANSITIVE:
				case VAR:
				case YIELD:
				case RECORD:
				case SEALED:
				case PERMITS:
				case LT:
				case IDENTIFIER:
					{
					State = 1358;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 1357; typeArguments();
						}
					}

					State = 1360; identifier();
					}
					break;
				case NEW:
					{
					State = 1361; Match(NEW);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				{
				State = 1364; classType();
				State = 1365; Match(COLONCOLON);
				State = 1367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1366; typeArguments();
					}
				}

				State = 1369; Match(NEW);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1456;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1454;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1373;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1374;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (MUL - 104)) | (1L << (DIV - 104)) | (1L << (MOD - 104)))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1375; expression(19);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1376;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1377;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1378; expression(18);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1379;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1387;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
						case 1:
							{
							State = 1380; Match(LT);
							State = 1381; Match(LT);
							}
							break;
						case 2:
							{
							State = 1382; Match(GT);
							State = 1383; Match(GT);
							State = 1384; Match(GT);
							}
							break;
						case 3:
							{
							State = 1385; Match(GT);
							State = 1386; Match(GT);
							}
							break;
						}
						State = 1389; expression(17);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1390;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1391;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (GT - 88)) | (1L << (LT - 88)) | (1L << (LE - 88)) | (1L << (GE - 88)))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1392; expression(16);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1393;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1394;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1395; expression(14);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1396;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1397; _localctx.bop = Match(BITAND);
						State = 1398; expression(13);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1399;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1400; _localctx.bop = Match(CARET);
						State = 1401; expression(12);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1402;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1403; _localctx.bop = Match(BITOR);
						State = 1404; expression(11);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1405;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1406; _localctx.bop = Match(AND);
						State = 1407; expression(10);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1408;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1409; _localctx.bop = Match(OR);
						State = 1410; expression(9);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1411;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1412; _localctx.bop = Match(QUESTION);
						State = 1413; expression(0);
						State = 1414; Match(COLON);
						State = 1415; expression(7);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1417;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1418;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (ASSIGN - 87)) | (1L << (ADD_ASSIGN - 87)) | (1L << (SUB_ASSIGN - 87)) | (1L << (MUL_ASSIGN - 87)) | (1L << (DIV_ASSIGN - 87)) | (1L << (AND_ASSIGN - 87)) | (1L << (OR_ASSIGN - 87)) | (1L << (XOR_ASSIGN - 87)) | (1L << (MOD_ASSIGN - 87)) | (1L << (LSHIFT_ASSIGN - 87)) | (1L << (RSHIFT_ASSIGN - 87)) | (1L << (URSHIFT_ASSIGN - 87)))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1419; expression(6);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1420;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1421; _localctx.bop = Match(DOT);
						State = 1433;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
						case 1:
							{
							State = 1422; identifier();
							}
							break;
						case 2:
							{
							State = 1423; methodCall();
							}
							break;
						case 3:
							{
							State = 1424; Match(THIS);
							}
							break;
						case 4:
							{
							State = 1425; Match(NEW);
							State = 1427;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==LT) {
								{
								State = 1426; nonWildcardTypeArguments();
								}
							}

							State = 1429; innerCreator();
							}
							break;
						case 5:
							{
							State = 1430; Match(SUPER);
							State = 1431; superSuffix();
							}
							break;
						case 6:
							{
							State = 1432; explicitGenericInvocation();
							}
							break;
						}
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1435;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1436; Match(LBRACK);
						State = 1437; expression(0);
						State = 1438; Match(RBRACK);
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1440;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1441;
						_localctx.postfix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==INC || _la==DEC) ) {
							_localctx.postfix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1442;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1443; _localctx.bop = Match(INSTANCEOF);
						State = 1446;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
						case 1:
							{
							State = 1444; typeType();
							}
							break;
						case 2:
							{
							State = 1445; pattern();
							}
							break;
						}
						}
						break;
					case 17:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1448;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1449; Match(COLONCOLON);
						State = 1451;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LT) {
							{
							State = 1450; typeArguments();
							}
						}

						State = 1453; identifier();
						}
						break;
					}
					} 
				}
				State = 1458;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 196, RULE_pattern);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1459; variableModifier();
					}
					} 
				}
				State = 1464;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			}
			State = 1465; typeType();
			State = 1469;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1466; annotation();
					}
					} 
				}
				State = 1471;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			}
			State = 1472; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		public ITerminalNode ARROW() { return GetToken(JavaParser.ARROW, 0); }
		public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 198, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1474; lambdaParameters();
			State = 1475; Match(ARROW);
			State = 1476; lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public LambdaLVTIListContext lambdaLVTIList() {
			return GetRuleContext<LambdaLVTIListContext>(0);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
		EnterRule(_localctx, 200, RULE_lambdaParameters);
		int _la;
		try {
			State = 1500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1478; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1479; Match(LPAREN);
				State = 1481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FINAL - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (SHORT - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					State = 1480; formalParameterList();
					}
				}

				State = 1483; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1484; Match(LPAREN);
				State = 1485; identifier();
				State = 1490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1486; Match(COMMA);
					State = 1487; identifier();
					}
					}
					State = 1492;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1493; Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1495; Match(LPAREN);
				State = 1497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (FINAL - 18)) | (1L << (MODULE - 18)) | (1L << (OPEN - 18)) | (1L << (REQUIRES - 18)) | (1L << (EXPORTS - 18)) | (1L << (OPENS - 18)) | (1L << (TO - 18)) | (1L << (USES - 18)) | (1L << (PROVIDES - 18)) | (1L << (WITH - 18)) | (1L << (TRANSITIVE - 18)) | (1L << (VAR - 18)) | (1L << (YIELD - 18)) | (1L << (RECORD - 18)) | (1L << (SEALED - 18)) | (1L << (PERMITS - 18)))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					State = 1496; lambdaLVTIList();
					}
				}

				State = 1499; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 202, RULE_lambdaBody);
		try {
			State = 1504;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case SWITCH:
			case THIS:
			case VOID:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case TEXT_BLOCK:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1502; expression(0);
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1503; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public ITerminalNode THIS() { return GetToken(JavaParser.THIS, 0); }
		public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JavaParser.DOT, 0); }
		public ITerminalNode CLASS() { return GetToken(JavaParser.CLASS, 0); }
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 204, RULE_primary);
		try {
			State = 1524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1506; Match(LPAREN);
				State = 1507; expression(0);
				State = 1508; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1510; Match(THIS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1511; Match(SUPER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1512; literal();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1513; identifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1514; typeTypeOrVoid();
				State = 1515; Match(DOT);
				State = 1516; Match(CLASS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1518; nonWildcardTypeArguments();
				State = 1522;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUPER:
				case MODULE:
				case OPEN:
				case REQUIRES:
				case EXPORTS:
				case OPENS:
				case TO:
				case USES:
				case PROVIDES:
				case WITH:
				case TRANSITIVE:
				case VAR:
				case YIELD:
				case RECORD:
				case SEALED:
				case PERMITS:
				case IDENTIFIER:
					{
					State = 1519; explicitGenericInvocationSuffix();
					}
					break;
				case THIS:
					{
					State = 1520; Match(THIS);
					State = 1521; arguments();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchExpressionContext : ParserRuleContext {
		public ITerminalNode SWITCH() { return GetToken(JavaParser.SWITCH, 0); }
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		public SwitchLabeledRuleContext[] switchLabeledRule() {
			return GetRuleContexts<SwitchLabeledRuleContext>();
		}
		public SwitchLabeledRuleContext switchLabeledRule(int i) {
			return GetRuleContext<SwitchLabeledRuleContext>(i);
		}
		public SwitchExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchExpressionContext switchExpression() {
		SwitchExpressionContext _localctx = new SwitchExpressionContext(Context, State);
		EnterRule(_localctx, 206, RULE_switchExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1526; Match(SWITCH);
			State = 1527; parExpression();
			State = 1528; Match(LBRACE);
			State = 1532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1529; switchLabeledRule();
				}
				}
				State = 1534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1535; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabeledRuleContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(JavaParser.CASE, 0); }
		public SwitchRuleOutcomeContext switchRuleOutcome() {
			return GetRuleContext<SwitchRuleOutcomeContext>(0);
		}
		public ITerminalNode ARROW() { return GetToken(JavaParser.ARROW, 0); }
		public ITerminalNode COLON() { return GetToken(JavaParser.COLON, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode NULL_LITERAL() { return GetToken(JavaParser.NULL_LITERAL, 0); }
		public GuardedPatternContext guardedPattern() {
			return GetRuleContext<GuardedPatternContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(JavaParser.DEFAULT, 0); }
		public SwitchLabeledRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabeledRule; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabeledRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabeledRuleContext switchLabeledRule() {
		SwitchLabeledRuleContext _localctx = new SwitchLabeledRuleContext(Context, State);
		EnterRule(_localctx, 208, RULE_switchLabeledRule);
		int _la;
		try {
			State = 1548;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1537; Match(CASE);
				State = 1541;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1538; expressionList();
					}
					break;
				case 2:
					{
					State = 1539; Match(NULL_LITERAL);
					}
					break;
				case 3:
					{
					State = 1540; guardedPattern(0);
					}
					break;
				}
				State = 1543;
				_la = TokenStream.LA(1);
				if ( !(_la==COLON || _la==ARROW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1544; switchRuleOutcome();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1545; Match(DEFAULT);
				State = 1546;
				_la = TokenStream.LA(1);
				if ( !(_la==COLON || _la==ARROW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1547; switchRuleOutcome();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardedPatternContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public GuardedPatternContext guardedPattern() {
			return GetRuleContext<GuardedPatternContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(JavaParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(JavaParser.AND, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GuardedPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guardedPattern; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuardedPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuardedPatternContext guardedPattern() {
		return guardedPattern(0);
	}

	private GuardedPatternContext guardedPattern(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		GuardedPatternContext _localctx = new GuardedPatternContext(Context, _parentState);
		GuardedPatternContext _prevctx = _localctx;
		int _startState = 210;
		EnterRecursionRule(_localctx, 210, RULE_guardedPattern, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				State = 1551; Match(LPAREN);
				State = 1552; guardedPattern(0);
				State = 1553; Match(RPAREN);
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FINAL:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case AT:
			case IDENTIFIER:
				{
				State = 1558;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1555; variableModifier();
						}
						} 
					}
					State = 1560;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
				}
				State = 1561; typeType();
				State = 1565;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1562; annotation();
						}
						} 
					}
					State = 1567;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
				}
				State = 1568; identifier();
				State = 1573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,187,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1569; Match(AND);
						State = 1570; expression(0);
						}
						} 
					}
					State = 1575;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,187,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1583;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new GuardedPatternContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_guardedPattern);
					State = 1578;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1579; Match(AND);
					State = 1580; expression(0);
					}
					} 
				}
				State = 1585;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SwitchRuleOutcomeContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public SwitchRuleOutcomeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchRuleOutcome; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchRuleOutcome(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchRuleOutcomeContext switchRuleOutcome() {
		SwitchRuleOutcomeContext _localctx = new SwitchRuleOutcomeContext(Context, State);
		EnterRule(_localctx, 212, RULE_switchRuleOutcome);
		int _la;
		try {
			State = 1593;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1586; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (ASSERT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BREAK - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (CONTINUE - 1)) | (1L << (DO - 1)) | (1L << (DOUBLE - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (FOR - 1)) | (1L << (IF - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NEW - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (RETURN - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SUPER - 1)) | (1L << (SWITCH - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (THIS - 1)) | (1L << (THROW - 1)) | (1L << (TRY - 1)) | (1L << (VOID - 1)) | (1L << (WHILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (DECIMAL_LITERAL - 65)) | (1L << (HEX_LITERAL - 65)) | (1L << (OCT_LITERAL - 65)) | (1L << (BINARY_LITERAL - 65)) | (1L << (FLOAT_LITERAL - 65)) | (1L << (HEX_FLOAT_LITERAL - 65)) | (1L << (BOOL_LITERAL - 65)) | (1L << (CHAR_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (TEXT_BLOCK - 65)) | (1L << (NULL_LITERAL - 65)) | (1L << (LPAREN - 65)) | (1L << (LBRACE - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (BANG - 65)) | (1L << (TILDE - 65)) | (1L << (INC - 65)) | (1L << (DEC - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
					{
					{
					State = 1587; blockStatement();
					}
					}
					State = 1592;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JavaParser.DOT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 214, RULE_classType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				State = 1595; classOrInterfaceType();
				State = 1596; Match(DOT);
				}
				break;
			}
			State = 1603;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1600; annotation();
					}
					} 
				}
				State = 1605;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			}
			State = 1606; identifier();
			State = 1608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1607; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public ArrayCreatorRestContext arrayCreatorRest() {
			return GetRuleContext<ArrayCreatorRestContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(Context, State);
		EnterRule(_localctx, 216, RULE_creator);
		try {
			State = 1619;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1610; nonWildcardTypeArguments();
				State = 1611; createdName();
				State = 1612; classCreatorRest();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1614; createdName();
				State = 1617;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACK:
					{
					State = 1615; arrayCreatorRest();
					}
					break;
				case LPAREN:
					{
					State = 1616; classCreatorRest();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public TypeArgumentsOrDiamondContext[] typeArgumentsOrDiamond() {
			return GetRuleContexts<TypeArgumentsOrDiamondContext>();
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond(int i) {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(JavaParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(JavaParser.DOT, i);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreatedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(Context, State);
		EnterRule(_localctx, 218, RULE_createdName);
		int _la;
		try {
			State = 1636;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1621; identifier();
				State = 1623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1622; typeArgumentsOrDiamond();
					}
				}

				State = 1632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 1625; Match(DOT);
					State = 1626; identifier();
					State = 1628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 1627; typeArgumentsOrDiamond();
						}
					}

					}
					}
					State = 1634;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1635; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerCreatorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
			return GetRuleContext<NonWildcardTypeArgumentsOrDiamondContext>(0);
		}
		public InnerCreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerCreator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerCreator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerCreatorContext innerCreator() {
		InnerCreatorContext _localctx = new InnerCreatorContext(Context, State);
		EnterRule(_localctx, 220, RULE_innerCreator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638; identifier();
			State = 1640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1639; nonWildcardTypeArgumentsOrDiamond();
				}
			}

			State = 1642; classCreatorRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreatorRestContext : ParserRuleContext {
		public ITerminalNode[] LBRACK() { return GetTokens(JavaParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(JavaParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParser.RBRACK, i);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreatorRest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreatorRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreatorRestContext arrayCreatorRest() {
		ArrayCreatorRestContext _localctx = new ArrayCreatorRestContext(Context, State);
		EnterRule(_localctx, 222, RULE_arrayCreatorRest);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1644; Match(LBRACK);
			State = 1672;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RBRACK:
				{
				State = 1645; Match(RBRACK);
				State = 1650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1646; Match(LBRACK);
					State = 1647; Match(RBRACK);
					}
					}
					State = 1652;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1653; arrayInitializer();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case SWITCH:
			case THIS:
			case VOID:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case TEXT_BLOCK:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case AT:
			case IDENTIFIER:
				{
				State = 1654; expression(0);
				State = 1655; Match(RBRACK);
				State = 1662;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1656; Match(LBRACK);
						State = 1657; expression(0);
						State = 1658; Match(RBRACK);
						}
						} 
					}
					State = 1664;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
				}
				State = 1669;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1665; Match(LBRACK);
						State = 1666; Match(RBRACK);
						}
						} 
					}
					State = 1671;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassCreatorRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(Context, State);
		EnterRule(_localctx, 224, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1674; arguments();
			State = 1676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				{
				State = 1675; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		public ExplicitGenericInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationContext explicitGenericInvocation() {
		ExplicitGenericInvocationContext _localctx = new ExplicitGenericInvocationContext(Context, State);
		EnterRule(_localctx, 226, RULE_explicitGenericInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678; nonWildcardTypeArguments();
			State = 1679; explicitGenericInvocationSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(JavaParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(JavaParser.GT, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 228, RULE_typeArgumentsOrDiamond);
		try {
			State = 1684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1681; Match(LT);
				State = 1682; Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1683; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsOrDiamondContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(JavaParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(JavaParser.GT, 0); }
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArgumentsOrDiamond; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWildcardTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
		NonWildcardTypeArgumentsOrDiamondContext _localctx = new NonWildcardTypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 230, RULE_nonWildcardTypeArgumentsOrDiamond);
		try {
			State = 1689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1686; Match(LT);
				State = 1687; Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1688; nonWildcardTypeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(JavaParser.LT, 0); }
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public ITerminalNode GT() { return GetToken(JavaParser.GT, 0); }
		public NonWildcardTypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWildcardTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
		NonWildcardTypeArgumentsContext _localctx = new NonWildcardTypeArgumentsContext(Context, State);
		EnterRule(_localctx, 232, RULE_nonWildcardTypeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1691; Match(LT);
			State = 1692; typeList();
			State = 1693; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 234, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1695; typeType();
			State = 1700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1696; Match(COMMA);
				State = 1697; typeType();
				}
				}
				State = 1702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(JavaParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(JavaParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParser.RBRACK, i);
		}
		public TypeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeContext typeType() {
		TypeTypeContext _localctx = new TypeTypeContext(Context, State);
		EnterRule(_localctx, 236, RULE_typeType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1706;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1703; annotation();
					}
					} 
				}
				State = 1708;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			}
			State = 1711;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case IDENTIFIER:
				{
				State = 1709; classOrInterfaceType();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				State = 1710; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1723;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1716;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==AT || _la==IDENTIFIER) {
						{
						{
						State = 1713; annotation();
						}
						}
						State = 1718;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1719; Match(LBRACK);
					State = 1720; Match(RBRACK);
					}
					} 
				}
				State = 1725;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(JavaParser.BOOLEAN, 0); }
		public ITerminalNode CHAR() { return GetToken(JavaParser.CHAR, 0); }
		public ITerminalNode BYTE() { return GetToken(JavaParser.BYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(JavaParser.SHORT, 0); }
		public ITerminalNode INT() { return GetToken(JavaParser.INT, 0); }
		public ITerminalNode LONG() { return GetToken(JavaParser.LONG, 0); }
		public ITerminalNode FLOAT() { return GetToken(JavaParser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(JavaParser.DOUBLE, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 238, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1726;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(JavaParser.LT, 0); }
		public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public ITerminalNode GT() { return GetToken(JavaParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 240, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1728; Match(LT);
			State = 1729; typeArgument();
			State = 1734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1730; Match(COMMA);
				State = 1731; typeArgument();
				}
				}
				State = 1736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1737; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperSuffixContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(JavaParser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public SuperSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superSuffix; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperSuffixContext superSuffix() {
		SuperSuffixContext _localctx = new SuperSuffixContext(Context, State);
		EnterRule(_localctx, 242, RULE_superSuffix);
		int _la;
		try {
			State = 1748;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1739; arguments();
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1740; Match(DOT);
				State = 1742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1741; typeArguments();
					}
				}

				State = 1744; identifier();
				State = 1746;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
				case 1:
					{
					State = 1745; arguments();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationSuffixContext : ParserRuleContext {
		public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocationSuffix; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocationSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
		ExplicitGenericInvocationSuffixContext _localctx = new ExplicitGenericInvocationSuffixContext(Context, State);
		EnterRule(_localctx, 244, RULE_explicitGenericInvocationSuffix);
		try {
			State = 1755;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1750; Match(SUPER);
				State = 1751; superSuffix();
				}
				break;
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1752; identifier();
				State = 1753; arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 246, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1757; Match(LPAREN);
			State = 1759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				State = 1758; expressionList();
				}
			}

			State = 1761; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 97: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 105: return guardedPattern_sempred((GuardedPatternContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 7);
		case 11: return Precpred(Context, 6);
		case 12: return Precpred(Context, 26);
		case 13: return Precpred(Context, 25);
		case 14: return Precpred(Context, 21);
		case 15: return Precpred(Context, 14);
		case 16: return Precpred(Context, 3);
		}
		return true;
	}
	private bool guardedPattern_sempred(GuardedPatternContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x82', '\x6E6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x3', '\x2', '\x5', '\x2', '\xFC', '\n', '\x2', '\x3', '\x2', '\a', 
		'\x2', '\xFF', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x102', '\v', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x105', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x108', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x10D', '\n', '\x2', '\x3', '\x3', '\a', '\x3', '\x110', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x113', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x11B', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x120', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\a', '\x5', '\x125', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'\x128', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x12F', '\n', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x132', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x139', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x145', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x149', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x14E', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x152', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x156', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x15A', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x162', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\x165', '\v', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\a', '\v', '\x16A', '\n', '\v', '\f', '\v', '\xE', 
		'\v', '\x16D', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\x172', '\n', '\v', '\f', '\v', '\xE', '\v', '\x175', '\v', '\v', 
		'\x3', '\v', '\x5', '\v', '\x178', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\x17D', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x180', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x186', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\x18A', '\n', '\r', '\x3', '\r', '\x5', '\r', '\x18D', '\n', '\r', '\x3', 
		'\r', '\x5', '\r', '\x190', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x197', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\x19A', '\v', '\xE', '\x3', '\xF', '\a', '\xF', 
		'\x19D', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x1A0', '\v', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x1A4', '\n', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x1A7', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\x1AB', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x1AE', 
		'\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x1B3', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x1B7', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x1BB', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\x1C1', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x1C4', '\v', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x1CA', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x1CD', '\v', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x1D3', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', 
		'\x1D7', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x1DA', '\v', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\x1DD', '\n', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x1E9', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\x1F0', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\x1F3', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x1F7', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x1FD', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x201', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x20D', '\n', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\a', '\x1D', '\x216', '\n', '\x1D', '\f', 
		'\x1D', '\xE', '\x1D', '\x219', '\v', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x21D', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x227', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x22D', '\n', '\x1F', '\f', 
		'\x1F', '\xE', '\x1F', '\x230', '\v', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x237', '\n', ' ', '\f', 
		' ', '\xE', ' ', '\x23A', '\v', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', '!', '\a', '!', '\x240', '\n', '!', '\f', '!', '\xE', '!', '\x243', 
		'\v', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x24D', '\n', '\"', 
		'\x3', '#', '\a', '#', '\x250', '\n', '#', '\f', '#', '\xE', '#', '\x253', 
		'\v', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\a', '$', 
		'\x259', '\n', '$', '\f', '$', '\xE', '$', '\x25C', '\v', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\a', '$', '\x263', 
		'\n', '$', '\f', '$', '\xE', '$', '\x266', '\v', '$', '\x3', '$', '\x3', 
		'$', '\x5', '$', '\x26A', '\n', '$', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\a', '%', '\x271', '\n', '%', '\f', '%', '\xE', 
		'%', '\x274', '\v', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', 
		'\x279', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', 
		'\x27E', '\n', '\'', '\f', '\'', '\xE', '\'', '\x281', '\v', '\'', '\x3', 
		'(', '\x3', '(', '\x5', '(', '\x285', '\n', '(', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\a', ')', '\x28B', '\n', ')', '\f', ')', '\xE', 
		')', '\x28E', '\v', ')', '\x3', ')', '\x5', ')', '\x291', '\n', ')', '\x5', 
		')', '\x293', '\n', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', 
		'\x5', '*', '\x299', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', 
		'*', '\x29E', '\n', '*', '\a', '*', '\x2A0', '\n', '*', '\f', '*', '\xE', 
		'*', '\x2A3', '\v', '*', '\x3', '+', '\x3', '+', '\a', '+', '\x2A7', '\n', 
		'+', '\f', '+', '\xE', '+', '\x2AA', '\v', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x2AF', '\n', '+', '\x5', '+', '\x2B1', '\n', 
		'+', '\x3', ',', '\x3', ',', '\x3', ',', '\a', ',', '\x2B6', '\n', ',', 
		'\f', ',', '\xE', ',', '\x2B9', '\v', ',', '\x3', '-', '\x3', '-', '\x5', 
		'-', '\x2BD', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', 
		'\x2C2', '\n', '-', '\x3', '-', '\x5', '-', '\x2C5', '\n', '-', '\x5', 
		'-', '\x2C7', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\a', '.', '\x2CF', '\n', '.', '\f', '.', '\xE', 
		'.', '\x2D2', '\v', '.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\a', '/', '\x2D9', '\n', '/', '\f', '/', '\xE', '/', '\x2DC', 
		'\v', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x2E0', '\n', '/', '\x3', 
		'/', '\x5', '/', '\x2E3', '\n', '/', '\x3', '\x30', '\a', '\x30', '\x2E6', 
		'\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x2E9', '\v', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\a', '\x31', '\x2EF', 
		'\n', '\x31', '\f', '\x31', '\xE', '\x31', '\x2F2', '\v', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\a', '\x31', '\x2F6', '\n', '\x31', '\f', '\x31', 
		'\xE', '\x31', '\x2F9', '\v', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x301', 
		'\n', '\x32', '\f', '\x32', '\xE', '\x32', '\x304', '\v', '\x32', '\x3', 
		'\x33', '\a', '\x33', '\x307', '\n', '\x33', '\f', '\x33', '\xE', '\x33', 
		'\x30A', '\v', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x312', '\n', '\x34', 
		'\f', '\x34', '\xE', '\x34', '\x315', '\v', '\x34', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x5', '\x35', '\x31E', '\n', '\x35', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\a', '\x38', '\x327', '\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x32A', 
		'\v', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x332', '\n', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x337', '\n', '\x39', 
		'\x3', '\x39', '\x5', '\x39', '\x33A', '\n', '\x39', '\x3', ':', '\x3', 
		':', '\x3', ':', '\a', ':', '\x33F', '\n', ':', '\f', ':', '\xE', ':', 
		'\x342', '\v', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x5', '<', '\x34B', '\n', '<', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\a', '=', '\x351', '\n', '=', '\f', 
		'=', '\xE', '=', '\x354', '\v', '=', '\x5', '=', '\x356', '\n', '=', '\x3', 
		'=', '\x5', '=', '\x359', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', 
		'\a', '?', '\x364', '\n', '?', '\f', '?', '\xE', '?', '\x367', '\v', '?', 
		'\x3', '?', '\x3', '?', '\x3', '@', '\a', '@', '\x36C', '\n', '@', '\f', 
		'@', '\xE', '@', '\x36F', '\v', '@', '\x3', '@', '\x3', '@', '\x5', '@', 
		'\x373', '\n', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x37B', '\n', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x37F', '\n', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x5', '\x41', '\x383', '\n', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x5', '\x41', '\x387', '\n', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x5', '\x41', '\x38B', '\n', '\x41', '\x5', '\x41', '\x38D', 
		'\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x391', '\n', 
		'\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', 
		'\x43', '\x397', '\n', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x5', '\x46', '\x39F', '\n', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'G', '\x3', 'G', '\a', 'G', '\x3A7', '\n', 'G', '\f', 'G', '\xE', 'G', 
		'\x3AA', '\v', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\a', 
		'H', '\x3B0', '\n', 'H', '\f', 'H', '\xE', 'H', '\x3B3', '\v', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x5', 'H', '\x3BC', '\n', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x3C4', '\n', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 
		'H', '\x3D2', '\n', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x5', 'J', '\x3D9', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x5', 'J', '\x3DE', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'K', 
		'\x3', 'K', '\x5', 'K', '\x3E4', '\n', 'K', '\x3', 'K', '\x3', 'K', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\a', 'L', '\x3EB', '\n', 'L', '\f', 'L', 
		'\xE', 'L', '\x3EE', '\v', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'N', '\x3', 'N', '\a', 'N', '\x3F5', '\n', 'N', '\f', 'N', '\xE', 'N', 
		'\x3F8', '\v', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\a', 
		'O', '\x3FE', '\n', 'O', '\f', 'O', '\xE', 'O', '\x401', '\v', 'O', '\x3', 
		'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 
		'P', '\x5', 'P', '\x40A', '\n', 'P', '\x3', 'Q', '\a', 'Q', '\x40D', '\n', 
		'Q', '\f', 'Q', '\xE', 'Q', '\x410', '\v', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x5', 'Q', '\x41A', '\n', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\a', 
		'S', '\x41F', '\n', 'S', '\f', 'S', '\xE', 'S', '\x422', '\v', 'S', '\x3', 
		'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', '\x427', '\n', 'S', '\x3', 'S', 
		'\x5', 'S', '\x42A', '\n', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x5', 'T', '\x431', '\n', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', 
		'\x43A', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x6', 'T', '\x44F', '\n', 'T', '\r', 'T', 
		'\xE', 'T', '\x450', '\x3', 'T', '\x5', 'T', '\x454', '\n', 'T', '\x3', 
		'T', '\x5', 'T', '\x457', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\a', 'T', '\x45D', '\n', 'T', '\f', 'T', '\xE', 'T', '\x460', 
		'\v', 'T', '\x3', 'T', '\x5', 'T', '\x463', '\n', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\a', 'T', '\x469', '\n', 'T', '\f', 'T', 
		'\xE', 'T', '\x46C', '\v', 'T', '\x3', 'T', '\a', 'T', '\x46F', '\n', 
		'T', '\f', 'T', '\xE', 'T', '\x472', '\v', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x5', 'T', '\x47C', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x485', '\n', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x48A', '\n', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x497', 
		'\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', 
		'\x49D', '\n', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\a', 'U', '\x4A2', 
		'\n', 'U', '\f', 'U', '\xE', 'U', '\x4A5', '\v', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\a', 'V', '\x4AF', '\n', 'V', '\f', 'V', '\xE', 'V', '\x4B2', '\v', 
		'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x5', 'X', '\x4BA', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\a', 'Y', '\x4C1', '\n', 'Y', '\f', 'Y', '\xE', 
		'Y', '\x4C4', '\v', 'Y', '\x3', 'Z', '\a', 'Z', '\x4C7', '\n', 'Z', '\f', 
		'Z', '\xE', 'Z', '\x4CA', '\v', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x4D1', '\n', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x4D7', '\n', 'Z', '\x3', '[', 
		'\x6', '[', '\x4DA', '\n', '[', '\r', '[', '\xE', '[', '\x4DB', '\x3', 
		'[', '\x6', '[', '\x4DF', '\n', '[', '\r', '[', '\xE', '[', '\x4E0', '\x3', 
		'\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', 
		'\x5', '\\', '\x4E9', '\n', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', 
		'\x5', '\\', '\x4EE', '\n', '\\', '\x3', ']', '\x3', ']', '\x5', ']', 
		'\x4F2', '\n', ']', '\x3', ']', '\x3', ']', '\x5', ']', '\x4F6', '\n', 
		']', '\x3', ']', '\x3', ']', '\x5', ']', '\x4FA', '\n', ']', '\x5', ']', 
		'\x4FC', '\n', ']', '\x3', '^', '\x3', '^', '\x5', '^', '\x500', '\n', 
		'^', '\x3', '_', '\a', '_', '\x503', '\n', '_', '\f', '_', '\xE', '_', 
		'\x506', '\v', '_', '\x3', '_', '\x3', '_', '\x5', '_', '\x50A', '\n', 
		'_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', 
		'\a', '\x61', '\x517', '\n', '\x61', '\f', '\x61', '\xE', '\x61', '\x51A', 
		'\v', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', 
		'\x51F', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\x3', '\x62', '\x5', '\x62', '\x526', '\n', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\x52C', '\n', 
		'\x62', '\x3', '\x62', '\x5', '\x62', '\x52F', '\n', '\x62', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\a', '\x63', '\x538', '\n', '\x63', '\f', '\x63', '\xE', 
		'\x63', '\x53B', '\v', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\a', '\x63', '\x540', '\n', '\x63', '\f', '\x63', '\xE', '\x63', '\x543', 
		'\v', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\x551', '\n', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\x555', '\n', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\x55A', '\n', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\x55E', '\n', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', 
		'\x56E', '\n', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x5', 
		'\x63', '\x596', '\n', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x5', '\x63', '\x59C', '\n', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x5', 
		'\x63', '\x5A9', '\n', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x5', '\x63', '\x5AE', '\n', '\x63', '\x3', '\x63', '\a', '\x63', '\x5B1', 
		'\n', '\x63', '\f', '\x63', '\xE', '\x63', '\x5B4', '\v', '\x63', '\x3', 
		'\x64', '\a', '\x64', '\x5B7', '\n', '\x64', '\f', '\x64', '\xE', '\x64', 
		'\x5BA', '\v', '\x64', '\x3', '\x64', '\x3', '\x64', '\a', '\x64', '\x5BE', 
		'\n', '\x64', '\f', '\x64', '\xE', '\x64', '\x5C1', '\v', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', 
		'\x65', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x5CC', 
		'\n', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\a', '\x66', '\x5D3', '\n', '\x66', '\f', '\x66', '\xE', 
		'\x66', '\x5D6', '\v', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x5', '\x66', '\x5DC', '\n', '\x66', '\x3', '\x66', '\x5', 
		'\x66', '\x5DF', '\n', '\x66', '\x3', 'g', '\x3', 'g', '\x5', 'g', '\x5E3', 
		'\n', 'g', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', 
		'\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', 
		'\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x5', 'h', 
		'\x5F5', '\n', 'h', '\x5', 'h', '\x5F7', '\n', 'h', '\x3', 'i', '\x3', 
		'i', '\x3', 'i', '\x3', 'i', '\a', 'i', '\x5FD', '\n', 'i', '\f', 'i', 
		'\xE', 'i', '\x600', '\v', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\x608', '\n', 'j', '\x3', 'j', 
		'\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\x60F', '\n', 
		'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\a', 'k', '\x617', '\n', 'k', '\f', 'k', '\xE', 'k', '\x61A', '\v', 
		'k', '\x3', 'k', '\x3', 'k', '\a', 'k', '\x61E', '\n', 'k', '\f', 'k', 
		'\xE', 'k', '\x621', '\v', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\a', 
		'k', '\x626', '\n', 'k', '\f', 'k', '\xE', 'k', '\x629', '\v', 'k', '\x5', 
		'k', '\x62B', '\n', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\a', 'k', 
		'\x630', '\n', 'k', '\f', 'k', '\xE', 'k', '\x633', '\v', 'k', '\x3', 
		'l', '\x3', 'l', '\a', 'l', '\x637', '\n', 'l', '\f', 'l', '\xE', 'l', 
		'\x63A', '\v', 'l', '\x5', 'l', '\x63C', '\n', 'l', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\x5', 'm', '\x641', '\n', 'm', '\x3', 'm', '\a', 'm', 
		'\x644', '\n', 'm', '\f', 'm', '\xE', 'm', '\x647', '\v', 'm', '\x3', 
		'm', '\x3', 'm', '\x5', 'm', '\x64B', '\n', 'm', '\x3', 'n', '\x3', 'n', 
		'\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x5', 'n', 
		'\x654', '\n', 'n', '\x5', 'n', '\x656', '\n', 'n', '\x3', 'o', '\x3', 
		'o', '\x5', 'o', '\x65A', '\n', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', 
		'\x5', 'o', '\x65F', '\n', 'o', '\a', 'o', '\x661', '\n', 'o', '\f', 'o', 
		'\xE', 'o', '\x664', '\v', 'o', '\x3', 'o', '\x5', 'o', '\x667', '\n', 
		'o', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\x66B', '\n', 'p', '\x3', 'p', 
		'\x3', 'p', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\a', 'q', 
		'\x673', '\n', 'q', '\f', 'q', '\xE', 'q', '\x676', '\v', 'q', '\x3', 
		'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 
		'q', '\a', 'q', '\x67F', '\n', 'q', '\f', 'q', '\xE', 'q', '\x682', '\v', 
		'q', '\x3', 'q', '\x3', 'q', '\a', 'q', '\x686', '\n', 'q', '\f', 'q', 
		'\xE', 'q', '\x689', '\v', 'q', '\x5', 'q', '\x68B', '\n', 'q', '\x3', 
		'r', '\x3', 'r', '\x5', 'r', '\x68F', '\n', 'r', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\x697', '\n', 
		't', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\x69C', '\n', 'u', 
		'\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'w', '\x3', 'w', 
		'\x3', 'w', '\a', 'w', '\x6A5', '\n', 'w', '\f', 'w', '\xE', 'w', '\x6A8', 
		'\v', 'w', '\x3', 'x', '\a', 'x', '\x6AB', '\n', 'x', '\f', 'x', '\xE', 
		'x', '\x6AE', '\v', 'x', '\x3', 'x', '\x3', 'x', '\x5', 'x', '\x6B2', 
		'\n', 'x', '\x3', 'x', '\a', 'x', '\x6B5', '\n', 'x', '\f', 'x', '\xE', 
		'x', '\x6B8', '\v', 'x', '\x3', 'x', '\x3', 'x', '\a', 'x', '\x6BC', '\n', 
		'x', '\f', 'x', '\xE', 'x', '\x6BF', '\v', 'x', '\x3', 'y', '\x3', 'y', 
		'\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\a', 'z', '\x6C7', '\n', 
		'z', '\f', 'z', '\xE', 'z', '\x6CA', '\v', 'z', '\x3', 'z', '\x3', 'z', 
		'\x3', '{', '\x3', '{', '\x3', '{', '\x5', '{', '\x6D1', '\n', '{', '\x3', 
		'{', '\x3', '{', '\x5', '{', '\x6D5', '\n', '{', '\x5', '{', '\x6D7', 
		'\n', '{', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', 
		'\x5', '|', '\x6DE', '\n', '|', '\x3', '}', '\x3', '}', '\x5', '}', '\x6E2', 
		'\n', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x2', '\x4', '\xC4', '\xD4', 
		'~', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 
		't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', 
		'\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\xBE', 
		'\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', '\xCC', '\xCE', '\xD0', 
		'\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', '\xDE', '\xE0', '\xE2', 
		'\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', '\xF0', '\xF2', '\xF4', 
		'\xF6', '\xF8', '\x2', '\x11', '\x4', '\x2', '\x13', '\x13', '*', '*', 
		'\x3', '\x2', '\x45', 'H', '\x3', '\x2', 'I', 'J', '\x4', '\x2', '(', 
		'(', '>', '>', '\x4', '\x2', '\x35', '\x43', '\x82', '\x82', '\x3', '\x2', 
		'\x66', 'i', '\x3', '\x2', '\\', ']', '\x4', '\x2', 'j', 'k', 'o', 'o', 
		'\x3', '\x2', 'h', 'i', '\x4', '\x2', 'Z', '[', '\x61', '\x62', '\x4', 
		'\x2', '`', '`', '\x63', '\x63', '\x4', '\x2', 'Y', 'Y', 'p', 'z', '\x3', 
		'\x2', '\x66', 'g', '\x4', '\x2', '_', '_', '{', '{', '\n', '\x2', '\x5', 
		'\x5', '\a', '\a', '\n', '\n', '\x10', '\x10', '\x16', '\x16', '\x1D', 
		'\x1D', '\x1F', '\x1F', '\'', '\'', '\x2', '\x7AE', '\x2', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x111', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\b', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x138', '\x3', '\x2', '\x2', '\x2', '\f', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x148', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x12', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x181', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x193', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x19E', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1A8', '\x3', '\x2', '\x2', '\x2', ' ', '\x1AF', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x1BE', '\x3', '\x2', '\x2', '\x2', '$', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x1E8', '\x3', '\x2', '\x2', '\x2', '*', '\x1EA', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x1FC', '\x3', '\x2', '\x2', '\x2', '.', '\x200', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x202', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x205', '\x3', '\x2', '\x2', '\x2', '\x34', '\x208', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x210', '\x3', '\x2', '\x2', '\x2', '\x38', '\x21C', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x226', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x228', '\x3', '\x2', '\x2', '\x2', '>', '\x233', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x241', '\x3', '\x2', '\x2', '\x2', '\x42', '\x24C', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x251', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x25A', '\x3', '\x2', '\x2', '\x2', 'H', '\x26D', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x275', '\x3', '\x2', '\x2', '\x2', 'L', '\x27A', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x284', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x286', '\x3', '\x2', '\x2', '\x2', 'R', '\x296', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x2B0', '\x3', '\x2', '\x2', '\x2', 'V', '\x2B2', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x2BA', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\\', '\x2E2', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x2E7', '\x3', '\x2', '\x2', '\x2', '`', '\x2F0', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x2FD', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x308', '\x3', '\x2', '\x2', '\x2', '\x66', '\x30E', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x31D', '\x3', '\x2', '\x2', '\x2', 'j', '\x31F', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x321', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x328', '\x3', '\x2', '\x2', '\x2', 'p', '\x331', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x33B', '\x3', '\x2', '\x2', '\x2', 't', '\x343', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x34A', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x34C', '\x3', '\x2', '\x2', '\x2', 'z', '\x35C', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x361', '\x3', '\x2', '\x2', '\x2', '~', '\x372', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x38C', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x390', '\x3', '\x2', '\x2', '\x2', '\x84', '\x392', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x398', '\x3', '\x2', '\x2', '\x2', '\x88', '\x39A', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x39E', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x3A4', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x3D1', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x3D3', '\x3', '\x2', '\x2', '\x2', '\x92', '\x3D5', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x3E1', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x3E7', '\x3', '\x2', '\x2', '\x2', '\x98', '\x3EF', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x3FB', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x409', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x40E', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x41B', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x429', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x49C', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\x49E', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\x4AB', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x4B3', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x4B6', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x4BD', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\x4D6', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\x4D9', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x4ED', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x4FB', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x4FF', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\x504', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\x50F', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x513', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x52E', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x55D', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\x5B8', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x5DE', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\x5E2', '\x3', '\x2', '\x2', '\x2', '\xCE', '\x5F6', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\x5F8', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\x60E', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x62A', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\x63B', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x640', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\x655', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\x666', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x668', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\x66E', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x68C', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\x690', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\x696', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x69B', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\x69D', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x6A1', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\x6AC', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\x6C0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x6C2', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\x6D6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\x6DD', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\x6DF', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xFC', '\x5', '\x4', '\x3', '\x2', '\xFB', '\xFA', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\xFF', '\x5', '\x6', '\x4', '\x2', 
		'\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x102', '\x3', '\x2', 
		'\x2', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x103', '\x105', '\x5', 
		'\b', '\x5', '\x2', '\x104', '\x103', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x10A', '\x5', '\x8A', '\x46', '\x2', '\x10A', '\x10B', '\a', 
		'\x2', '\x2', '\x3', '\x10B', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x3', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x110', '\x5', 
		'p', '\x39', '\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\a', '\"', '\x2', '\x2', '\x115', '\x116', '\x5', '\x66', 
		'\x34', '\x2', '\x116', '\x117', '\a', 'V', '\x2', '\x2', '\x117', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x11A', '\a', '\x1B', '\x2', '\x2', 
		'\x119', '\x11B', '\a', '(', '\x2', '\x2', '\x11A', '\x119', '\x3', '\x2', 
		'\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11F', '\x5', '\x66', '\x34', '\x2', 
		'\x11D', '\x11E', '\a', 'X', '\x2', '\x2', '\x11E', '\x120', '\a', 'j', 
		'\x2', '\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x122', '\a', 'V', '\x2', '\x2', '\x122', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\x125', '\x5', '\f', '\a', '\x2', '\x124', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x126', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12F', '\x5', '\x10', 
		'\t', '\x2', '\x12A', '\x12F', '\x5', '\x18', '\r', '\x2', '\x12B', '\x12F', 
		'\x5', ' ', '\x11', '\x2', '\x12C', '\x12F', '\x5', 'z', '>', '\x2', '\x12D', 
		'\x12F', '\x5', '\x92', 'J', '\x2', '\x12E', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x132', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x132', '\a', 'V', '\x2', '\x2', '\x131', 
		'\x126', '\x3', '\x2', '\x2', '\x2', '\x131', '\x130', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\t', '\x3', '\x2', '\x2', '\x2', '\x133', '\x139', '\x5', 
		'\f', '\a', '\x2', '\x134', '\x139', '\a', ' ', '\x2', '\x2', '\x135', 
		'\x139', '\a', ',', '\x2', '\x2', '\x136', '\x139', '\a', '\x30', '\x2', 
		'\x2', '\x137', '\x139', '\a', '\x33', '\x2', '\x2', '\x138', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x135', '\x3', '\x2', '\x2', '\x2', '\x138', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x137', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x145', '\x5', 'p', '\x39', 
		'\x2', '\x13B', '\x145', '\a', '%', '\x2', '\x2', '\x13C', '\x145', '\a', 
		'$', '\x2', '\x2', '\x13D', '\x145', '\a', '#', '\x2', '\x2', '\x13E', 
		'\x145', '\a', '(', '\x2', '\x2', '\x13F', '\x145', '\a', '\x3', '\x2', 
		'\x2', '\x140', '\x145', '\a', '\x14', '\x2', '\x2', '\x141', '\x145', 
		'\a', ')', '\x2', '\x2', '\x142', '\x145', '\a', '\x42', '\x2', '\x2', 
		'\x143', '\x145', '\a', '\x44', '\x2', '\x2', '\x144', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x144', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x144', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x141', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x143', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x146', '\x149', '\a', '\x14', '\x2', 
		'\x2', '\x147', '\x149', '\x5', 'p', '\x39', '\x2', '\x148', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\xF', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\a', '\v', 
		'\x2', '\x2', '\x14B', '\x14D', '\x5', '\xA2', 'R', '\x2', '\x14C', '\x14E', 
		'\x5', '\x12', '\n', '\x2', '\x14D', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x150', '\a', '\x13', '\x2', '\x2', '\x150', 
		'\x152', '\x5', '\xEE', 'x', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x152', '\x3', '\x2', '\x2', '\x2', '\x152', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\a', '\x1A', '\x2', '\x2', 
		'\x154', '\x156', '\x5', '\xEC', 'w', '\x2', '\x155', '\x153', '\x3', 
		'\x2', '\x2', '\x2', '\x155', '\x156', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\a', '\x43', '\x2', 
		'\x2', '\x158', '\x15A', '\x5', '\xEC', 'w', '\x2', '\x159', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\x5', 
		'\"', '\x12', '\x2', '\x15C', '\x11', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15E', '\a', '[', '\x2', '\x2', '\x15E', '\x163', '\x5', '\x14', '\v', 
		'\x2', '\x15F', '\x160', '\a', 'W', '\x2', '\x2', '\x160', '\x162', '\x5', 
		'\x14', '\v', '\x2', '\x161', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x163', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x167', '\a', 'Z', '\x2', '\x2', '\x167', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x168', '\x16A', '\x5', 'p', '\x39', '\x2', '\x169', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\x16A', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x16B', '\x169', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16D', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x177', '\x5', '\xA2', 
		'R', '\x2', '\x16F', '\x173', '\a', '\x13', '\x2', '\x2', '\x170', '\x172', 
		'\x5', 'p', '\x39', '\x2', '\x171', '\x170', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\x175', '\x3', '\x2', '\x2', '\x2', '\x173', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x174', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x176', '\x3', '\x2', '\x2', '\x2', '\x175', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x176', '\x178', '\x5', '\x16', '\f', '\x2', '\x177', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x15', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17E', '\x5', 
		'\xEE', 'x', '\x2', '\x17A', '\x17B', '\a', 'l', '\x2', '\x2', '\x17B', 
		'\x17D', '\x5', '\xEE', 'x', '\x2', '\x17C', '\x17A', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '\x180', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x17', '\x3', '\x2', '\x2', '\x2', '\x180', '\x17E', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x182', '\a', '\x12', '\x2', '\x2', '\x182', 
		'\x185', '\x5', '\xA2', 'R', '\x2', '\x183', '\x184', '\a', '\x1A', '\x2', 
		'\x2', '\x184', '\x186', '\x5', '\xEC', 'w', '\x2', '\x185', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x187', '\x3', '\x2', '\x2', '\x2', '\x187', '\x189', '\a', 
		'R', '\x2', '\x2', '\x188', '\x18A', '\x5', '\x1A', '\xE', '\x2', '\x189', 
		'\x188', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18D', 
		'\a', 'W', '\x2', '\x2', '\x18C', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18F', '\x3', 
		'\x2', '\x2', '\x2', '\x18E', '\x190', '\x5', '\x1E', '\x10', '\x2', '\x18F', 
		'\x18E', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x191', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', 
		'\a', 'S', '\x2', '\x2', '\x192', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x193', '\x198', '\x5', '\x1C', '\xF', '\x2', '\x194', '\x195', '\a', 
		'W', '\x2', '\x2', '\x195', '\x197', '\x5', '\x1C', '\xF', '\x2', '\x196', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x197', '\x19A', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x196', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x19A', '\x198', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19D', '\x5', 
		'p', '\x39', '\x2', '\x19C', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19D', 
		'\x1A0', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A0', '\x19E', '\x3', '\x2', '\x2', '\x2', 
		'\x1A1', '\x1A3', '\x5', '\xA2', 'R', '\x2', '\x1A2', '\x1A4', '\x5', 
		'\xF8', '}', '\x2', '\x1A3', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A3', 
		'\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A6', '\x3', '\x2', '\x2', 
		'\x2', '\x1A5', '\x1A7', '\x5', '\"', '\x12', '\x2', '\x1A6', '\x1A5', 
		'\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AC', '\a', 'V', 
		'\x2', '\x2', '\x1A9', '\x1AB', '\x5', '&', '\x14', '\x2', '\x1AA', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x1AC', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\x3', 
		'\x2', '\x2', '\x2', '\x1AD', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\a', '\x1E', '\x2', 
		'\x2', '\x1B0', '\x1B2', '\x5', '\xA2', 'R', '\x2', '\x1B1', '\x1B3', 
		'\x5', '\x12', '\n', '\x2', '\x1B2', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B6', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\a', '\x13', '\x2', '\x2', '\x1B5', 
		'\x1B7', '\x5', '\xEC', 'w', '\x2', '\x1B6', '\x1B4', '\x3', '\x2', '\x2', 
		'\x2', '\x1B6', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\a', '\x43', '\x2', '\x2', 
		'\x1B9', '\x1BB', '\x5', '\xEC', 'w', '\x2', '\x1BA', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BB', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\x5', '$', '\x13', 
		'\x2', '\x1BD', '!', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1C2', '\a', 
		'R', '\x2', '\x2', '\x1BF', '\x1C1', '\x5', '&', '\x14', '\x2', '\x1C0', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C4', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', 
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C5', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\a', 
		'S', '\x2', '\x2', '\x1C6', '#', '\x3', '\x2', '\x2', '\x2', '\x1C7', 
		'\x1CB', '\a', 'R', '\x2', '\x2', '\x1C8', '\x1CA', '\x5', '\x38', '\x1D', 
		'\x2', '\x1C9', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1C9', '\x3', '\x2', '\x2', '\x2', 
		'\x1CB', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1CD', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CE', 
		'\x1CF', '\a', 'S', '\x2', '\x2', '\x1CF', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\x1DD', '\a', 'V', '\x2', '\x2', '\x1D1', '\x1D3', '\a', '(', 
		'\x2', '\x2', '\x1D2', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x3', '\x2', '\x2', '\x2', 
		'\x1D4', '\x1DD', '\x5', '\x9C', 'O', '\x2', '\x1D5', '\x1D7', '\x5', 
		'\n', '\x6', '\x2', '\x1D6', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D6', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DB', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1D8', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1DD', '\x5', '(', '\x15', '\x2', '\x1DC', '\x1D0', '\x3', 
		'\x2', '\x2', '\x2', '\x1DC', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1DC', 
		'\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x1DE', '\x1E9', '\x5', '*', '\x16', '\x2', '\x1DF', '\x1E9', 
		'\x5', '\x30', '\x19', '\x2', '\x1E0', '\x1E9', '\x5', '\x36', '\x1C', 
		'\x2', '\x1E1', '\x1E9', '\x5', '\x34', '\x1B', '\x2', '\x1E2', '\x1E9', 
		'\x5', '\x32', '\x1A', '\x2', '\x1E3', '\x1E9', '\x5', ' ', '\x11', '\x2', 
		'\x1E4', '\x1E9', '\x5', 'z', '>', '\x2', '\x1E5', '\x1E9', '\x5', '\x10', 
		'\t', '\x2', '\x1E6', '\x1E9', '\x5', '\x18', '\r', '\x2', '\x1E7', '\x1E9', 
		'\x5', '\x92', 'J', '\x2', '\x1E8', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E0', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E8', 
		'\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E3', '\x3', '\x2', '\x2', 
		'\x2', '\x1E8', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E9', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA', '\x1EB', '\x5', '.', '\x18', '\x2', '\x1EB', '\x1EC', 
		'\x5', '\xA2', 'R', '\x2', '\x1EC', '\x1F1', '\x5', 'X', '-', '\x2', '\x1ED', 
		'\x1EE', '\a', 'T', '\x2', '\x2', '\x1EE', '\x1F0', '\a', 'U', '\x2', 
		'\x2', '\x1EF', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F3', 
		'\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'\x1F1', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F6', '\x3', 
		'\x2', '\x2', '\x2', '\x1F3', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F4', 
		'\x1F5', '\a', '/', '\x2', '\x2', '\x1F5', '\x1F7', '\x5', 'V', ',', '\x2', 
		'\x1F6', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\x3', 
		'\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F8', 
		'\x1F9', '\x5', ',', '\x17', '\x2', '\x1F9', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x1FA', '\x1FD', '\x5', '\x9C', 'O', '\x2', '\x1FB', '\x1FD', 
		'\a', 'V', '\x2', '\x2', '\x1FC', '\x1FA', '\x3', '\x2', '\x2', '\x2', 
		'\x1FC', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FD', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE', '\x201', '\x5', '\xEE', 'x', '\x2', '\x1FF', '\x201', 
		'\a', '\x32', '\x2', '\x2', '\x200', '\x1FE', '\x3', '\x2', '\x2', '\x2', 
		'\x200', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x201', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x202', '\x203', '\x5', '\x12', '\n', '\x2', '\x203', '\x204', 
		'\x5', '*', '\x16', '\x2', '\x204', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x205', '\x206', '\x5', '\x12', '\n', '\x2', '\x206', '\x207', '\x5', 
		'\x34', '\x1B', '\x2', '\x207', '\x33', '\x3', '\x2', '\x2', '\x2', '\x208', 
		'\x209', '\x5', '\xA2', 'R', '\x2', '\x209', '\x20C', '\x5', 'X', '-', 
		'\x2', '\x20A', '\x20B', '\a', '/', '\x2', '\x2', '\x20B', '\x20D', '\x5', 
		'V', ',', '\x2', '\x20C', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', '\x3', '\x2', '\x2', 
		'\x2', '\x20E', '\x20F', '\x5', '\x9C', 'O', '\x2', '\x20F', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x210', '\x211', '\x5', '\xEE', 'x', '\x2', '\x211', 
		'\x212', '\x5', 'H', '%', '\x2', '\x212', '\x213', '\a', 'V', '\x2', '\x2', 
		'\x213', '\x37', '\x3', '\x2', '\x2', '\x2', '\x214', '\x216', '\x5', 
		'\n', '\x6', '\x2', '\x215', '\x214', '\x3', '\x2', '\x2', '\x2', '\x216', 
		'\x219', '\x3', '\x2', '\x2', '\x2', '\x217', '\x215', '\x3', '\x2', '\x2', 
		'\x2', '\x217', '\x218', '\x3', '\x2', '\x2', '\x2', '\x218', '\x21A', 
		'\x3', '\x2', '\x2', '\x2', '\x219', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'\x21A', '\x21D', '\x5', ':', '\x1E', '\x2', '\x21B', '\x21D', '\a', 'V', 
		'\x2', '\x2', '\x21C', '\x217', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', '\x21D', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x21E', '\x227', '\x5', '<', '\x1F', '\x2', '\x21F', '\x227', '\x5', 
		'@', '!', '\x2', '\x220', '\x227', '\x5', '\x44', '#', '\x2', '\x221', 
		'\x227', '\x5', ' ', '\x11', '\x2', '\x222', '\x227', '\x5', 'z', '>', 
		'\x2', '\x223', '\x227', '\x5', '\x10', '\t', '\x2', '\x224', '\x227', 
		'\x5', '\x18', '\r', '\x2', '\x225', '\x227', '\x5', '\x92', 'J', '\x2', 
		'\x226', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x226', '\x21F', '\x3', 
		'\x2', '\x2', '\x2', '\x226', '\x220', '\x3', '\x2', '\x2', '\x2', '\x226', 
		'\x221', '\x3', '\x2', '\x2', '\x2', '\x226', '\x222', '\x3', '\x2', '\x2', 
		'\x2', '\x226', '\x223', '\x3', '\x2', '\x2', '\x2', '\x226', '\x224', 
		'\x3', '\x2', '\x2', '\x2', '\x226', '\x225', '\x3', '\x2', '\x2', '\x2', 
		'\x227', ';', '\x3', '\x2', '\x2', '\x2', '\x228', '\x229', '\x5', '\xEE', 
		'x', '\x2', '\x229', '\x22E', '\x5', '>', ' ', '\x2', '\x22A', '\x22B', 
		'\a', 'W', '\x2', '\x2', '\x22B', '\x22D', '\x5', '>', ' ', '\x2', '\x22C', 
		'\x22A', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x230', '\x3', '\x2', '\x2', 
		'\x2', '\x22E', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', 
		'\x3', '\x2', '\x2', '\x2', '\x22F', '\x231', '\x3', '\x2', '\x2', '\x2', 
		'\x230', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', '\a', 
		'V', '\x2', '\x2', '\x232', '=', '\x3', '\x2', '\x2', '\x2', '\x233', 
		'\x238', '\x5', '\xA2', 'R', '\x2', '\x234', '\x235', '\a', 'T', '\x2', 
		'\x2', '\x235', '\x237', '\a', 'U', '\x2', '\x2', '\x236', '\x234', '\x3', 
		'\x2', '\x2', '\x2', '\x237', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x238', 
		'\x236', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\x3', '\x2', '\x2', 
		'\x2', '\x239', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x238', 
		'\x3', '\x2', '\x2', '\x2', '\x23B', '\x23C', '\a', 'Y', '\x2', '\x2', 
		'\x23C', '\x23D', '\x5', 'N', '(', '\x2', '\x23D', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x23E', '\x240', '\x5', '\x42', '\"', '\x2', '\x23F', '\x23E', 
		'\x3', '\x2', '\x2', '\x2', '\x240', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x241', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x241', '\x242', '\x3', 
		'\x2', '\x2', '\x2', '\x242', '\x244', '\x3', '\x2', '\x2', '\x2', '\x243', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x244', '\x245', '\x5', '\x46', 
		'$', '\x2', '\x245', '\x41', '\x3', '\x2', '\x2', '\x2', '\x246', '\x24D', 
		'\x5', 'p', '\x39', '\x2', '\x247', '\x24D', '\a', '%', '\x2', '\x2', 
		'\x248', '\x24D', '\a', '\x3', '\x2', '\x2', '\x249', '\x24D', '\a', '\xE', 
		'\x2', '\x2', '\x24A', '\x24D', '\a', '(', '\x2', '\x2', '\x24B', '\x24D', 
		'\a', ')', '\x2', '\x2', '\x24C', '\x246', '\x3', '\x2', '\x2', '\x2', 
		'\x24C', '\x247', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x248', '\x3', 
		'\x2', '\x2', '\x2', '\x24C', '\x249', '\x3', '\x2', '\x2', '\x2', '\x24C', 
		'\x24A', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24B', '\x3', '\x2', '\x2', 
		'\x2', '\x24D', '\x43', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x250', 
		'\x5', '\x42', '\"', '\x2', '\x24F', '\x24E', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x253', '\x3', '\x2', '\x2', '\x2', '\x251', '\x24F', '\x3', 
		'\x2', '\x2', '\x2', '\x251', '\x252', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x254', '\x3', '\x2', '\x2', '\x2', '\x253', '\x251', '\x3', '\x2', '\x2', 
		'\x2', '\x254', '\x255', '\x5', '\x12', '\n', '\x2', '\x255', '\x256', 
		'\x5', '\x46', '$', '\x2', '\x256', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x257', '\x259', '\x5', 'p', '\x39', '\x2', '\x258', '\x257', '\x3', 
		'\x2', '\x2', '\x2', '\x259', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x258', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25B', '\x3', '\x2', '\x2', 
		'\x2', '\x25B', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x25D', '\x25E', '\x5', '.', '\x18', '\x2', 
		'\x25E', '\x25F', '\x5', '\xA2', 'R', '\x2', '\x25F', '\x264', '\x5', 
		'X', '-', '\x2', '\x260', '\x261', '\a', 'T', '\x2', '\x2', '\x261', '\x263', 
		'\a', 'U', '\x2', '\x2', '\x262', '\x260', '\x3', '\x2', '\x2', '\x2', 
		'\x263', '\x266', '\x3', '\x2', '\x2', '\x2', '\x264', '\x262', '\x3', 
		'\x2', '\x2', '\x2', '\x264', '\x265', '\x3', '\x2', '\x2', '\x2', '\x265', 
		'\x269', '\x3', '\x2', '\x2', '\x2', '\x266', '\x264', '\x3', '\x2', '\x2', 
		'\x2', '\x267', '\x268', '\a', '/', '\x2', '\x2', '\x268', '\x26A', '\x5', 
		'V', ',', '\x2', '\x269', '\x267', '\x3', '\x2', '\x2', '\x2', '\x269', 
		'\x26A', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x26B', '\x3', '\x2', '\x2', 
		'\x2', '\x26B', '\x26C', '\x5', ',', '\x17', '\x2', '\x26C', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x26D', '\x272', '\x5', 'J', '&', '\x2', '\x26E', 
		'\x26F', '\a', 'W', '\x2', '\x2', '\x26F', '\x271', '\x5', 'J', '&', '\x2', 
		'\x270', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x271', '\x274', '\x3', 
		'\x2', '\x2', '\x2', '\x272', '\x270', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x273', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x274', '\x272', '\x3', '\x2', '\x2', '\x2', '\x275', '\x278', 
		'\x5', 'L', '\'', '\x2', '\x276', '\x277', '\a', 'Y', '\x2', '\x2', '\x277', 
		'\x279', '\x5', 'N', '(', '\x2', '\x278', '\x276', '\x3', '\x2', '\x2', 
		'\x2', '\x278', '\x279', '\x3', '\x2', '\x2', '\x2', '\x279', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x27A', '\x27F', '\x5', '\xA2', 'R', '\x2', '\x27B', 
		'\x27C', '\a', 'T', '\x2', '\x2', '\x27C', '\x27E', '\a', 'U', '\x2', 
		'\x2', '\x27D', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x281', 
		'\x3', '\x2', '\x2', '\x2', '\x27F', '\x27D', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '\x280', '\x3', '\x2', '\x2', '\x2', '\x280', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x281', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x282', '\x285', 
		'\x5', 'P', ')', '\x2', '\x283', '\x285', '\x5', '\xC4', '\x63', '\x2', 
		'\x284', '\x282', '\x3', '\x2', '\x2', '\x2', '\x284', '\x283', '\x3', 
		'\x2', '\x2', '\x2', '\x285', 'O', '\x3', '\x2', '\x2', '\x2', '\x286', 
		'\x292', '\a', 'R', '\x2', '\x2', '\x287', '\x28C', '\x5', 'N', '(', '\x2', 
		'\x288', '\x289', '\a', 'W', '\x2', '\x2', '\x289', '\x28B', '\x5', 'N', 
		'(', '\x2', '\x28A', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28E', 
		'\x3', '\x2', '\x2', '\x2', '\x28C', '\x28A', '\x3', '\x2', '\x2', '\x2', 
		'\x28C', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x290', '\x3', 
		'\x2', '\x2', '\x2', '\x28E', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x28F', 
		'\x291', '\a', 'W', '\x2', '\x2', '\x290', '\x28F', '\x3', '\x2', '\x2', 
		'\x2', '\x290', '\x291', '\x3', '\x2', '\x2', '\x2', '\x291', '\x293', 
		'\x3', '\x2', '\x2', '\x2', '\x292', '\x287', '\x3', '\x2', '\x2', '\x2', 
		'\x292', '\x293', '\x3', '\x2', '\x2', '\x2', '\x293', '\x294', '\x3', 
		'\x2', '\x2', '\x2', '\x294', '\x295', '\a', 'S', '\x2', '\x2', '\x295', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x296', '\x298', '\x5', '\xA2', 'R', 
		'\x2', '\x297', '\x299', '\x5', '\xF2', 'z', '\x2', '\x298', '\x297', 
		'\x3', '\x2', '\x2', '\x2', '\x298', '\x299', '\x3', '\x2', '\x2', '\x2', 
		'\x299', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x29B', '\a', 
		'X', '\x2', '\x2', '\x29B', '\x29D', '\x5', '\xA2', 'R', '\x2', '\x29C', 
		'\x29E', '\x5', '\xF2', 'z', '\x2', '\x29D', '\x29C', '\x3', '\x2', '\x2', 
		'\x2', '\x29D', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x2A0', 
		'\x3', '\x2', '\x2', '\x2', '\x29F', '\x29A', '\x3', '\x2', '\x2', '\x2', 
		'\x2A0', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x29F', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A2', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A1', '\x3', '\x2', '\x2', 
		'\x2', '\x2A4', '\x2B1', '\x5', '\xEE', 'x', '\x2', '\x2A5', '\x2A7', 
		'\x5', 'p', '\x39', '\x2', '\x2A6', '\x2A5', '\x3', '\x2', '\x2', '\x2', 
		'\x2A7', '\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A6', '\x3', 
		'\x2', '\x2', '\x2', '\x2A8', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x2A9', 
		'\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2A8', '\x3', '\x2', '\x2', 
		'\x2', '\x2AB', '\x2AE', '\a', '^', '\x2', '\x2', '\x2AC', '\x2AD', '\t', 
		'\x2', '\x2', '\x2', '\x2AD', '\x2AF', '\x5', '\xEE', 'x', '\x2', '\x2AE', 
		'\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AF', '\x3', '\x2', '\x2', 
		'\x2', '\x2AF', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2A4', 
		'\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2A8', '\x3', '\x2', '\x2', '\x2', 
		'\x2B1', 'U', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B7', '\x5', '\x66', 
		'\x34', '\x2', '\x2B3', '\x2B4', '\a', 'W', '\x2', '\x2', '\x2B4', '\x2B6', 
		'\x5', '\x66', '\x34', '\x2', '\x2B5', '\x2B3', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B5', '\x3', 
		'\x2', '\x2', '\x2', '\x2B7', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2B8', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2B7', '\x3', '\x2', '\x2', 
		'\x2', '\x2BA', '\x2C6', '\a', 'P', '\x2', '\x2', '\x2BB', '\x2BD', '\x5', 
		'Z', '.', '\x2', '\x2BC', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BC', 
		'\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2C7', '\x3', '\x2', '\x2', 
		'\x2', '\x2BE', '\x2C1', '\x5', 'Z', '.', '\x2', '\x2BF', '\x2C0', '\a', 
		'W', '\x2', '\x2', '\x2C0', '\x2C2', '\x5', '\\', '/', '\x2', '\x2C1', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C2', '\x3', '\x2', '\x2', 
		'\x2', '\x2C2', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C5', 
		'\x5', '\\', '/', '\x2', '\x2C4', '\x2C3', '\x3', '\x2', '\x2', '\x2', 
		'\x2C4', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C7', '\x3', 
		'\x2', '\x2', '\x2', '\x2C6', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2C6', 
		'\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x2C4', '\x3', '\x2', '\x2', 
		'\x2', '\x2C7', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C9', 
		'\a', 'Q', '\x2', '\x2', '\x2C9', 'Y', '\x3', '\x2', '\x2', '\x2', '\x2CA', 
		'\x2D0', '\x5', '\xEE', 'x', '\x2', '\x2CB', '\x2CC', '\x5', '\xA2', 'R', 
		'\x2', '\x2CC', '\x2CD', '\a', 'X', '\x2', '\x2', '\x2CD', '\x2CF', '\x3', 
		'\x2', '\x2', '\x2', '\x2CE', '\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2CF', 
		'\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2CE', '\x3', '\x2', '\x2', 
		'\x2', '\x2D0', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D3', 
		'\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D0', '\x3', '\x2', '\x2', '\x2', 
		'\x2D3', '\x2D4', '\a', '-', '\x2', '\x2', '\x2D4', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x2D5', '\x2DA', '\x5', '^', '\x30', '\x2', '\x2D6', '\x2D7', 
		'\a', 'W', '\x2', '\x2', '\x2D7', '\x2D9', '\x5', '^', '\x30', '\x2', 
		'\x2D8', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DC', '\x3', 
		'\x2', '\x2', '\x2', '\x2DA', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2DA', 
		'\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DF', '\x3', '\x2', '\x2', 
		'\x2', '\x2DC', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DE', 
		'\a', 'W', '\x2', '\x2', '\x2DE', '\x2E0', '\x5', '`', '\x31', '\x2', 
		'\x2DF', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E0', '\x3', 
		'\x2', '\x2', '\x2', '\x2E0', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2E1', 
		'\x2E3', '\x5', '`', '\x31', '\x2', '\x2E2', '\x2D5', '\x3', '\x2', '\x2', 
		'\x2', '\x2E2', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2E3', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x2E4', '\x2E6', '\x5', '\xE', '\b', '\x2', '\x2E5', 
		'\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2E9', '\x3', '\x2', '\x2', 
		'\x2', '\x2E7', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E8', 
		'\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2EA', '\x3', '\x2', '\x2', '\x2', 
		'\x2E9', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EB', '\x5', 
		'\xEE', 'x', '\x2', '\x2EB', '\x2EC', '\x5', 'L', '\'', '\x2', '\x2EC', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EF', '\x5', '\xE', '\b', 
		'\x2', '\x2EE', '\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2F2', 
		'\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2EE', '\x3', '\x2', '\x2', '\x2', 
		'\x2F0', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F1', '\x2F3', '\x3', 
		'\x2', '\x2', '\x2', '\x2F2', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F3', 
		'\x2F7', '\x5', '\xEE', 'x', '\x2', '\x2F4', '\x2F6', '\x5', 'p', '\x39', 
		'\x2', '\x2F5', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F9', 
		'\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'\x2F7', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2FA', '\x3', 
		'\x2', '\x2', '\x2', '\x2F9', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2FA', 
		'\x2FB', '\a', '~', '\x2', '\x2', '\x2FB', '\x2FC', '\x5', 'L', '\'', 
		'\x2', '\x2FC', '\x61', '\x3', '\x2', '\x2', '\x2', '\x2FD', '\x302', 
		'\x5', '\x64', '\x33', '\x2', '\x2FE', '\x2FF', '\a', 'W', '\x2', '\x2', 
		'\x2FF', '\x301', '\x5', '\x64', '\x33', '\x2', '\x300', '\x2FE', '\x3', 
		'\x2', '\x2', '\x2', '\x301', '\x304', '\x3', '\x2', '\x2', '\x2', '\x302', 
		'\x300', '\x3', '\x2', '\x2', '\x2', '\x302', '\x303', '\x3', '\x2', '\x2', 
		'\x2', '\x303', '\x63', '\x3', '\x2', '\x2', '\x2', '\x304', '\x302', 
		'\x3', '\x2', '\x2', '\x2', '\x305', '\x307', '\x5', '\xE', '\b', '\x2', 
		'\x306', '\x305', '\x3', '\x2', '\x2', '\x2', '\x307', '\x30A', '\x3', 
		'\x2', '\x2', '\x2', '\x308', '\x306', '\x3', '\x2', '\x2', '\x2', '\x308', 
		'\x309', '\x3', '\x2', '\x2', '\x2', '\x309', '\x30B', '\x3', '\x2', '\x2', 
		'\x2', '\x30A', '\x308', '\x3', '\x2', '\x2', '\x2', '\x30B', '\x30C', 
		'\a', '?', '\x2', '\x2', '\x30C', '\x30D', '\x5', '\xA2', 'R', '\x2', 
		'\x30D', '\x65', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x313', '\x5', 
		'\xA2', 'R', '\x2', '\x30F', '\x310', '\a', 'X', '\x2', '\x2', '\x310', 
		'\x312', '\x5', '\xA2', 'R', '\x2', '\x311', '\x30F', '\x3', '\x2', '\x2', 
		'\x2', '\x312', '\x315', '\x3', '\x2', '\x2', '\x2', '\x313', '\x311', 
		'\x3', '\x2', '\x2', '\x2', '\x313', '\x314', '\x3', '\x2', '\x2', '\x2', 
		'\x314', 'g', '\x3', '\x2', '\x2', '\x2', '\x315', '\x313', '\x3', '\x2', 
		'\x2', '\x2', '\x316', '\x31E', '\x5', 'j', '\x36', '\x2', '\x317', '\x31E', 
		'\x5', 'l', '\x37', '\x2', '\x318', '\x31E', '\a', 'L', '\x2', '\x2', 
		'\x319', '\x31E', '\a', 'M', '\x2', '\x2', '\x31A', '\x31E', '\a', 'K', 
		'\x2', '\x2', '\x31B', '\x31E', '\a', 'O', '\x2', '\x2', '\x31C', '\x31E', 
		'\a', 'N', '\x2', '\x2', '\x31D', '\x316', '\x3', '\x2', '\x2', '\x2', 
		'\x31D', '\x317', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x318', '\x3', 
		'\x2', '\x2', '\x2', '\x31D', '\x319', '\x3', '\x2', '\x2', '\x2', '\x31D', 
		'\x31A', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x31B', '\x3', '\x2', '\x2', 
		'\x2', '\x31D', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x31E', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x320', '\t', '\x3', '\x2', '\x2', '\x320', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x321', '\x322', '\t', '\x4', '\x2', 
		'\x2', '\x322', 'm', '\x3', '\x2', '\x2', '\x2', '\x323', '\x324', '\x5', 
		'\xA2', 'R', '\x2', '\x324', '\x325', '\a', 'X', '\x2', '\x2', '\x325', 
		'\x327', '\x3', '\x2', '\x2', '\x2', '\x326', '\x323', '\x3', '\x2', '\x2', 
		'\x2', '\x327', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x328', '\x326', 
		'\x3', '\x2', '\x2', '\x2', '\x328', '\x329', '\x3', '\x2', '\x2', '\x2', 
		'\x329', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x328', '\x3', 
		'\x2', '\x2', '\x2', '\x32B', '\x32C', '\a', '}', '\x2', '\x2', '\x32C', 
		'\x32D', '\x5', '\xA2', 'R', '\x2', '\x32D', 'o', '\x3', '\x2', '\x2', 
		'\x2', '\x32E', '\x32F', '\a', '}', '\x2', '\x2', '\x32F', '\x332', '\x5', 
		'\x66', '\x34', '\x2', '\x330', '\x332', '\x5', 'n', '\x38', '\x2', '\x331', 
		'\x32E', '\x3', '\x2', '\x2', '\x2', '\x331', '\x330', '\x3', '\x2', '\x2', 
		'\x2', '\x332', '\x339', '\x3', '\x2', '\x2', '\x2', '\x333', '\x336', 
		'\a', 'P', '\x2', '\x2', '\x334', '\x337', '\x5', 'r', ':', '\x2', '\x335', 
		'\x337', '\x5', 'v', '<', '\x2', '\x336', '\x334', '\x3', '\x2', '\x2', 
		'\x2', '\x336', '\x335', '\x3', '\x2', '\x2', '\x2', '\x336', '\x337', 
		'\x3', '\x2', '\x2', '\x2', '\x337', '\x338', '\x3', '\x2', '\x2', '\x2', 
		'\x338', '\x33A', '\a', 'Q', '\x2', '\x2', '\x339', '\x333', '\x3', '\x2', 
		'\x2', '\x2', '\x339', '\x33A', '\x3', '\x2', '\x2', '\x2', '\x33A', 'q', 
		'\x3', '\x2', '\x2', '\x2', '\x33B', '\x340', '\x5', 't', ';', '\x2', 
		'\x33C', '\x33D', '\a', 'W', '\x2', '\x2', '\x33D', '\x33F', '\x5', 't', 
		';', '\x2', '\x33E', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x33F', '\x342', 
		'\x3', '\x2', '\x2', '\x2', '\x340', '\x33E', '\x3', '\x2', '\x2', '\x2', 
		'\x340', '\x341', '\x3', '\x2', '\x2', '\x2', '\x341', 's', '\x3', '\x2', 
		'\x2', '\x2', '\x342', '\x340', '\x3', '\x2', '\x2', '\x2', '\x343', '\x344', 
		'\x5', '\xA2', 'R', '\x2', '\x344', '\x345', '\a', 'Y', '\x2', '\x2', 
		'\x345', '\x346', '\x5', 'v', '<', '\x2', '\x346', 'u', '\x3', '\x2', 
		'\x2', '\x2', '\x347', '\x34B', '\x5', '\xC4', '\x63', '\x2', '\x348', 
		'\x34B', '\x5', 'p', '\x39', '\x2', '\x349', '\x34B', '\x5', 'x', '=', 
		'\x2', '\x34A', '\x347', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x348', 
		'\x3', '\x2', '\x2', '\x2', '\x34A', '\x349', '\x3', '\x2', '\x2', '\x2', 
		'\x34B', 'w', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x355', '\a', 'R', 
		'\x2', '\x2', '\x34D', '\x352', '\x5', 'v', '<', '\x2', '\x34E', '\x34F', 
		'\a', 'W', '\x2', '\x2', '\x34F', '\x351', '\x5', 'v', '<', '\x2', '\x350', 
		'\x34E', '\x3', '\x2', '\x2', '\x2', '\x351', '\x354', '\x3', '\x2', '\x2', 
		'\x2', '\x352', '\x350', '\x3', '\x2', '\x2', '\x2', '\x352', '\x353', 
		'\x3', '\x2', '\x2', '\x2', '\x353', '\x356', '\x3', '\x2', '\x2', '\x2', 
		'\x354', '\x352', '\x3', '\x2', '\x2', '\x2', '\x355', '\x34D', '\x3', 
		'\x2', '\x2', '\x2', '\x355', '\x356', '\x3', '\x2', '\x2', '\x2', '\x356', 
		'\x358', '\x3', '\x2', '\x2', '\x2', '\x357', '\x359', '\a', 'W', '\x2', 
		'\x2', '\x358', '\x357', '\x3', '\x2', '\x2', '\x2', '\x358', '\x359', 
		'\x3', '\x2', '\x2', '\x2', '\x359', '\x35A', '\x3', '\x2', '\x2', '\x2', 
		'\x35A', '\x35B', '\a', 'S', '\x2', '\x2', '\x35B', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x35C', '\x35D', '\a', '}', '\x2', '\x2', '\x35D', '\x35E', 
		'\a', '\x1E', '\x2', '\x2', '\x35E', '\x35F', '\x5', '\xA2', 'R', '\x2', 
		'\x35F', '\x360', '\x5', '|', '?', '\x2', '\x360', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x361', '\x365', '\a', 'R', '\x2', '\x2', '\x362', '\x364', 
		'\x5', '~', '@', '\x2', '\x363', '\x362', '\x3', '\x2', '\x2', '\x2', 
		'\x364', '\x367', '\x3', '\x2', '\x2', '\x2', '\x365', '\x363', '\x3', 
		'\x2', '\x2', '\x2', '\x365', '\x366', '\x3', '\x2', '\x2', '\x2', '\x366', 
		'\x368', '\x3', '\x2', '\x2', '\x2', '\x367', '\x365', '\x3', '\x2', '\x2', 
		'\x2', '\x368', '\x369', '\a', 'S', '\x2', '\x2', '\x369', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x36A', '\x36C', '\x5', '\n', '\x6', '\x2', '\x36B', 
		'\x36A', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x36F', '\x3', '\x2', '\x2', 
		'\x2', '\x36D', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x36E', 
		'\x3', '\x2', '\x2', '\x2', '\x36E', '\x370', '\x3', '\x2', '\x2', '\x2', 
		'\x36F', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x370', '\x373', '\x5', 
		'\x80', '\x41', '\x2', '\x371', '\x373', '\a', 'V', '\x2', '\x2', '\x372', 
		'\x36D', '\x3', '\x2', '\x2', '\x2', '\x372', '\x371', '\x3', '\x2', '\x2', 
		'\x2', '\x373', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x374', '\x375', 
		'\x5', '\xEE', 'x', '\x2', '\x375', '\x376', '\x5', '\x82', '\x42', '\x2', 
		'\x376', '\x377', '\a', 'V', '\x2', '\x2', '\x377', '\x38D', '\x3', '\x2', 
		'\x2', '\x2', '\x378', '\x37A', '\x5', '\x10', '\t', '\x2', '\x379', '\x37B', 
		'\a', 'V', '\x2', '\x2', '\x37A', '\x379', '\x3', '\x2', '\x2', '\x2', 
		'\x37A', '\x37B', '\x3', '\x2', '\x2', '\x2', '\x37B', '\x38D', '\x3', 
		'\x2', '\x2', '\x2', '\x37C', '\x37E', '\x5', ' ', '\x11', '\x2', '\x37D', 
		'\x37F', '\a', 'V', '\x2', '\x2', '\x37E', '\x37D', '\x3', '\x2', '\x2', 
		'\x2', '\x37E', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x37F', '\x38D', 
		'\x3', '\x2', '\x2', '\x2', '\x380', '\x382', '\x5', '\x18', '\r', '\x2', 
		'\x381', '\x383', '\a', 'V', '\x2', '\x2', '\x382', '\x381', '\x3', '\x2', 
		'\x2', '\x2', '\x382', '\x383', '\x3', '\x2', '\x2', '\x2', '\x383', '\x38D', 
		'\x3', '\x2', '\x2', '\x2', '\x384', '\x386', '\x5', 'z', '>', '\x2', 
		'\x385', '\x387', '\a', 'V', '\x2', '\x2', '\x386', '\x385', '\x3', '\x2', 
		'\x2', '\x2', '\x386', '\x387', '\x3', '\x2', '\x2', '\x2', '\x387', '\x38D', 
		'\x3', '\x2', '\x2', '\x2', '\x388', '\x38A', '\x5', '\x92', 'J', '\x2', 
		'\x389', '\x38B', '\a', 'V', '\x2', '\x2', '\x38A', '\x389', '\x3', '\x2', 
		'\x2', '\x2', '\x38A', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x38B', '\x38D', 
		'\x3', '\x2', '\x2', '\x2', '\x38C', '\x374', '\x3', '\x2', '\x2', '\x2', 
		'\x38C', '\x378', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x37C', '\x3', 
		'\x2', '\x2', '\x2', '\x38C', '\x380', '\x3', '\x2', '\x2', '\x2', '\x38C', 
		'\x384', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x388', '\x3', '\x2', '\x2', 
		'\x2', '\x38D', '\x81', '\x3', '\x2', '\x2', '\x2', '\x38E', '\x391', 
		'\x5', '\x84', '\x43', '\x2', '\x38F', '\x391', '\x5', '\x86', '\x44', 
		'\x2', '\x390', '\x38E', '\x3', '\x2', '\x2', '\x2', '\x390', '\x38F', 
		'\x3', '\x2', '\x2', '\x2', '\x391', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x392', '\x393', '\x5', '\xA2', 'R', '\x2', '\x393', '\x394', '\a', 'P', 
		'\x2', '\x2', '\x394', '\x396', '\a', 'Q', '\x2', '\x2', '\x395', '\x397', 
		'\x5', '\x88', '\x45', '\x2', '\x396', '\x395', '\x3', '\x2', '\x2', '\x2', 
		'\x396', '\x397', '\x3', '\x2', '\x2', '\x2', '\x397', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x398', '\x399', '\x5', 'H', '%', '\x2', '\x399', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x39B', '\a', '\xE', '\x2', 
		'\x2', '\x39B', '\x39C', '\x5', 'v', '<', '\x2', '\x39C', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x39D', '\x39F', '\a', '\x36', '\x2', '\x2', '\x39E', 
		'\x39D', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x39F', '\x3', '\x2', '\x2', 
		'\x2', '\x39F', '\x3A0', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x3A1', 
		'\a', '\x35', '\x2', '\x2', '\x3A1', '\x3A2', '\x5', '\x66', '\x34', '\x2', 
		'\x3A2', '\x3A3', '\x5', '\x8C', 'G', '\x2', '\x3A3', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x3A4', '\x3A8', '\a', 'R', '\x2', '\x2', '\x3A5', '\x3A7', 
		'\x5', '\x8E', 'H', '\x2', '\x3A6', '\x3A5', '\x3', '\x2', '\x2', '\x2', 
		'\x3A7', '\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A6', '\x3', 
		'\x2', '\x2', '\x2', '\x3A8', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3A9', 
		'\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3A8', '\x3', '\x2', '\x2', 
		'\x2', '\x3AB', '\x3AC', '\a', 'S', '\x2', '\x2', '\x3AC', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x3AD', '\x3B1', '\a', '\x37', '\x2', '\x2', '\x3AE', 
		'\x3B0', '\x5', '\x90', 'I', '\x2', '\x3AF', '\x3AE', '\x3', '\x2', '\x2', 
		'\x2', '\x3B0', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B1', '\x3AF', 
		'\x3', '\x2', '\x2', '\x2', '\x3B1', '\x3B2', '\x3', '\x2', '\x2', '\x2', 
		'\x3B2', '\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B1', '\x3', 
		'\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\x5', '\x66', '\x34', '\x2', '\x3B5', 
		'\x3B6', '\a', 'V', '\x2', '\x2', '\x3B6', '\x3D2', '\x3', '\x2', '\x2', 
		'\x2', '\x3B7', '\x3B8', '\a', '\x38', '\x2', '\x2', '\x3B8', '\x3BB', 
		'\x5', '\x66', '\x34', '\x2', '\x3B9', '\x3BA', '\a', ':', '\x2', '\x2', 
		'\x3BA', '\x3BC', '\x5', '\x66', '\x34', '\x2', '\x3BB', '\x3B9', '\x3', 
		'\x2', '\x2', '\x2', '\x3BB', '\x3BC', '\x3', '\x2', '\x2', '\x2', '\x3BC', 
		'\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BE', '\a', 'V', '\x2', 
		'\x2', '\x3BE', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3C0', 
		'\a', '\x39', '\x2', '\x2', '\x3C0', '\x3C3', '\x5', '\x66', '\x34', '\x2', 
		'\x3C1', '\x3C2', '\a', ':', '\x2', '\x2', '\x3C2', '\x3C4', '\x5', '\x66', 
		'\x34', '\x2', '\x3C3', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C3', 
		'\x3C4', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C5', '\x3', '\x2', '\x2', 
		'\x2', '\x3C5', '\x3C6', '\a', 'V', '\x2', '\x2', '\x3C6', '\x3D2', '\x3', 
		'\x2', '\x2', '\x2', '\x3C7', '\x3C8', '\a', ';', '\x2', '\x2', '\x3C8', 
		'\x3C9', '\x5', '\x66', '\x34', '\x2', '\x3C9', '\x3CA', '\a', 'V', '\x2', 
		'\x2', '\x3CA', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3CC', 
		'\a', '<', '\x2', '\x2', '\x3CC', '\x3CD', '\x5', '\x66', '\x34', '\x2', 
		'\x3CD', '\x3CE', '\a', '=', '\x2', '\x2', '\x3CE', '\x3CF', '\x5', '\x66', 
		'\x34', '\x2', '\x3CF', '\x3D0', '\a', 'V', '\x2', '\x2', '\x3D0', '\x3D2', 
		'\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3AD', '\x3', '\x2', '\x2', '\x2', 
		'\x3D1', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3BF', '\x3', 
		'\x2', '\x2', '\x2', '\x3D1', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3D1', 
		'\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x3D3', '\x3D4', '\t', '\x5', '\x2', '\x2', '\x3D4', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x3D5', '\x3D6', '\a', '\x41', '\x2', '\x2', '\x3D6', 
		'\x3D8', '\x5', '\xA2', 'R', '\x2', '\x3D7', '\x3D9', '\x5', '\x12', '\n', 
		'\x2', '\x3D8', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3D8', '\x3D9', 
		'\x3', '\x2', '\x2', '\x2', '\x3D9', '\x3DA', '\x3', '\x2', '\x2', '\x2', 
		'\x3DA', '\x3DD', '\x5', '\x94', 'K', '\x2', '\x3DB', '\x3DC', '\a', '\x1A', 
		'\x2', '\x2', '\x3DC', '\x3DE', '\x5', '\xEC', 'w', '\x2', '\x3DD', '\x3DB', 
		'\x3', '\x2', '\x2', '\x2', '\x3DD', '\x3DE', '\x3', '\x2', '\x2', '\x2', 
		'\x3DE', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3DF', '\x3E0', '\x5', 
		'\x9A', 'N', '\x2', '\x3E0', '\x93', '\x3', '\x2', '\x2', '\x2', '\x3E1', 
		'\x3E3', '\a', 'P', '\x2', '\x2', '\x3E2', '\x3E4', '\x5', '\x96', 'L', 
		'\x2', '\x3E3', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E3', '\x3E4', 
		'\x3', '\x2', '\x2', '\x2', '\x3E4', '\x3E5', '\x3', '\x2', '\x2', '\x2', 
		'\x3E5', '\x3E6', '\a', 'Q', '\x2', '\x2', '\x3E6', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x3E7', '\x3EC', '\x5', '\x98', 'M', '\x2', '\x3E8', '\x3E9', 
		'\a', 'W', '\x2', '\x2', '\x3E9', '\x3EB', '\x5', '\x98', 'M', '\x2', 
		'\x3EA', '\x3E8', '\x3', '\x2', '\x2', '\x2', '\x3EB', '\x3EE', '\x3', 
		'\x2', '\x2', '\x2', '\x3EC', '\x3EA', '\x3', '\x2', '\x2', '\x2', '\x3EC', 
		'\x3ED', '\x3', '\x2', '\x2', '\x2', '\x3ED', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x3EE', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3F0', 
		'\x5', '\xEE', 'x', '\x2', '\x3F0', '\x3F1', '\x5', '\xA2', 'R', '\x2', 
		'\x3F1', '\x99', '\x3', '\x2', '\x2', '\x2', '\x3F2', '\x3F6', '\a', 'R', 
		'\x2', '\x2', '\x3F3', '\x3F5', '\x5', '&', '\x14', '\x2', '\x3F4', '\x3F3', 
		'\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F8', '\x3', '\x2', '\x2', '\x2', 
		'\x3F6', '\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3F7', '\x3', 
		'\x2', '\x2', '\x2', '\x3F7', '\x3F9', '\x3', '\x2', '\x2', '\x2', '\x3F8', 
		'\x3F6', '\x3', '\x2', '\x2', '\x2', '\x3F9', '\x3FA', '\a', 'S', '\x2', 
		'\x2', '\x3FA', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x3FB', '\x3FF', 
		'\a', 'R', '\x2', '\x2', '\x3FC', '\x3FE', '\x5', '\x9E', 'P', '\x2', 
		'\x3FD', '\x3FC', '\x3', '\x2', '\x2', '\x2', '\x3FE', '\x401', '\x3', 
		'\x2', '\x2', '\x2', '\x3FF', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x3FF', 
		'\x400', '\x3', '\x2', '\x2', '\x2', '\x400', '\x402', '\x3', '\x2', '\x2', 
		'\x2', '\x401', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x402', '\x403', 
		'\a', 'S', '\x2', '\x2', '\x403', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x404', '\x405', '\x5', '\xA0', 'Q', '\x2', '\x405', '\x406', '\a', 'V', 
		'\x2', '\x2', '\x406', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x407', '\x40A', 
		'\x5', '\xA6', 'T', '\x2', '\x408', '\x40A', '\x5', '\xA4', 'S', '\x2', 
		'\x409', '\x404', '\x3', '\x2', '\x2', '\x2', '\x409', '\x407', '\x3', 
		'\x2', '\x2', '\x2', '\x409', '\x408', '\x3', '\x2', '\x2', '\x2', '\x40A', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x40B', '\x40D', '\x5', '\xE', '\b', 
		'\x2', '\x40C', '\x40B', '\x3', '\x2', '\x2', '\x2', '\x40D', '\x410', 
		'\x3', '\x2', '\x2', '\x2', '\x40E', '\x40C', '\x3', '\x2', '\x2', '\x2', 
		'\x40E', '\x40F', '\x3', '\x2', '\x2', '\x2', '\x40F', '\x419', '\x3', 
		'\x2', '\x2', '\x2', '\x410', '\x40E', '\x3', '\x2', '\x2', '\x2', '\x411', 
		'\x412', '\x5', '\xEE', 'x', '\x2', '\x412', '\x413', '\x5', 'H', '%', 
		'\x2', '\x413', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x414', '\x415', 
		'\a', '?', '\x2', '\x2', '\x415', '\x416', '\x5', '\xA2', 'R', '\x2', 
		'\x416', '\x417', '\a', 'Y', '\x2', '\x2', '\x417', '\x418', '\x5', '\xC4', 
		'\x63', '\x2', '\x418', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x419', 
		'\x411', '\x3', '\x2', '\x2', '\x2', '\x419', '\x414', '\x3', '\x2', '\x2', 
		'\x2', '\x41A', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x41B', '\x41C', 
		'\t', '\x6', '\x2', '\x2', '\x41C', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\x41D', '\x41F', '\x5', '\f', '\a', '\x2', '\x41E', '\x41D', '\x3', '\x2', 
		'\x2', '\x2', '\x41F', '\x422', '\x3', '\x2', '\x2', '\x2', '\x420', '\x41E', 
		'\x3', '\x2', '\x2', '\x2', '\x420', '\x421', '\x3', '\x2', '\x2', '\x2', 
		'\x421', '\x426', '\x3', '\x2', '\x2', '\x2', '\x422', '\x420', '\x3', 
		'\x2', '\x2', '\x2', '\x423', '\x427', '\x5', '\x10', '\t', '\x2', '\x424', 
		'\x427', '\x5', ' ', '\x11', '\x2', '\x425', '\x427', '\x5', '\x92', 'J', 
		'\x2', '\x426', '\x423', '\x3', '\x2', '\x2', '\x2', '\x426', '\x424', 
		'\x3', '\x2', '\x2', '\x2', '\x426', '\x425', '\x3', '\x2', '\x2', '\x2', 
		'\x427', '\x42A', '\x3', '\x2', '\x2', '\x2', '\x428', '\x42A', '\a', 
		'V', '\x2', '\x2', '\x429', '\x420', '\x3', '\x2', '\x2', '\x2', '\x429', 
		'\x428', '\x3', '\x2', '\x2', '\x2', '\x42A', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\x42B', '\x49D', '\x5', '\x9C', 'O', '\x2', '\x42C', '\x42D', 
		'\a', '\x4', '\x2', '\x2', '\x42D', '\x430', '\x5', '\xC4', '\x63', '\x2', 
		'\x42E', '\x42F', '\a', '_', '\x2', '\x2', '\x42F', '\x431', '\x5', '\xC4', 
		'\x63', '\x2', '\x430', '\x42E', '\x3', '\x2', '\x2', '\x2', '\x430', 
		'\x431', '\x3', '\x2', '\x2', '\x2', '\x431', '\x432', '\x3', '\x2', '\x2', 
		'\x2', '\x432', '\x433', '\a', 'V', '\x2', '\x2', '\x433', '\x49D', '\x3', 
		'\x2', '\x2', '\x2', '\x434', '\x435', '\a', '\x18', '\x2', '\x2', '\x435', 
		'\x436', '\x5', '\xBE', '`', '\x2', '\x436', '\x439', '\x5', '\xA6', 'T', 
		'\x2', '\x437', '\x438', '\a', '\x11', '\x2', '\x2', '\x438', '\x43A', 
		'\x5', '\xA6', 'T', '\x2', '\x439', '\x437', '\x3', '\x2', '\x2', '\x2', 
		'\x439', '\x43A', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x49D', '\x3', 
		'\x2', '\x2', '\x2', '\x43B', '\x43C', '\a', '\x17', '\x2', '\x2', '\x43C', 
		'\x43D', '\a', 'P', '\x2', '\x2', '\x43D', '\x43E', '\x5', '\xB8', ']', 
		'\x2', '\x43E', '\x43F', '\a', 'Q', '\x2', '\x2', '\x43F', '\x440', '\x5', 
		'\xA6', 'T', '\x2', '\x440', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x441', 
		'\x442', '\a', '\x34', '\x2', '\x2', '\x442', '\x443', '\x5', '\xBE', 
		'`', '\x2', '\x443', '\x444', '\x5', '\xA6', 'T', '\x2', '\x444', '\x49D', 
		'\x3', '\x2', '\x2', '\x2', '\x445', '\x446', '\a', '\xF', '\x2', '\x2', 
		'\x446', '\x447', '\x5', '\xA6', 'T', '\x2', '\x447', '\x448', '\a', '\x34', 
		'\x2', '\x2', '\x448', '\x449', '\x5', '\xBE', '`', '\x2', '\x449', '\x44A', 
		'\a', 'V', '\x2', '\x2', '\x44A', '\x49D', '\x3', '\x2', '\x2', '\x2', 
		'\x44B', '\x44C', '\a', '\x31', '\x2', '\x2', '\x44C', '\x456', '\x5', 
		'\x9C', 'O', '\x2', '\x44D', '\x44F', '\x5', '\xA8', 'U', '\x2', '\x44E', 
		'\x44D', '\x3', '\x2', '\x2', '\x2', '\x44F', '\x450', '\x3', '\x2', '\x2', 
		'\x2', '\x450', '\x44E', '\x3', '\x2', '\x2', '\x2', '\x450', '\x451', 
		'\x3', '\x2', '\x2', '\x2', '\x451', '\x453', '\x3', '\x2', '\x2', '\x2', 
		'\x452', '\x454', '\x5', '\xAC', 'W', '\x2', '\x453', '\x452', '\x3', 
		'\x2', '\x2', '\x2', '\x453', '\x454', '\x3', '\x2', '\x2', '\x2', '\x454', 
		'\x457', '\x3', '\x2', '\x2', '\x2', '\x455', '\x457', '\x5', '\xAC', 
		'W', '\x2', '\x456', '\x44E', '\x3', '\x2', '\x2', '\x2', '\x456', '\x455', 
		'\x3', '\x2', '\x2', '\x2', '\x457', '\x49D', '\x3', '\x2', '\x2', '\x2', 
		'\x458', '\x459', '\a', '\x31', '\x2', '\x2', '\x459', '\x45A', '\x5', 
		'\xAE', 'X', '\x2', '\x45A', '\x45E', '\x5', '\x9C', 'O', '\x2', '\x45B', 
		'\x45D', '\x5', '\xA8', 'U', '\x2', '\x45C', '\x45B', '\x3', '\x2', '\x2', 
		'\x2', '\x45D', '\x460', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x45C', 
		'\x3', '\x2', '\x2', '\x2', '\x45E', '\x45F', '\x3', '\x2', '\x2', '\x2', 
		'\x45F', '\x462', '\x3', '\x2', '\x2', '\x2', '\x460', '\x45E', '\x3', 
		'\x2', '\x2', '\x2', '\x461', '\x463', '\x5', '\xAC', 'W', '\x2', '\x462', 
		'\x461', '\x3', '\x2', '\x2', '\x2', '\x462', '\x463', '\x3', '\x2', '\x2', 
		'\x2', '\x463', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x464', '\x465', 
		'\a', '+', '\x2', '\x2', '\x465', '\x466', '\x5', '\xBE', '`', '\x2', 
		'\x466', '\x46A', '\a', 'R', '\x2', '\x2', '\x467', '\x469', '\x5', '\xB4', 
		'[', '\x2', '\x468', '\x467', '\x3', '\x2', '\x2', '\x2', '\x469', '\x46C', 
		'\x3', '\x2', '\x2', '\x2', '\x46A', '\x468', '\x3', '\x2', '\x2', '\x2', 
		'\x46A', '\x46B', '\x3', '\x2', '\x2', '\x2', '\x46B', '\x470', '\x3', 
		'\x2', '\x2', '\x2', '\x46C', '\x46A', '\x3', '\x2', '\x2', '\x2', '\x46D', 
		'\x46F', '\x5', '\xB6', '\\', '\x2', '\x46E', '\x46D', '\x3', '\x2', '\x2', 
		'\x2', '\x46F', '\x472', '\x3', '\x2', '\x2', '\x2', '\x470', '\x46E', 
		'\x3', '\x2', '\x2', '\x2', '\x470', '\x471', '\x3', '\x2', '\x2', '\x2', 
		'\x471', '\x473', '\x3', '\x2', '\x2', '\x2', '\x472', '\x470', '\x3', 
		'\x2', '\x2', '\x2', '\x473', '\x474', '\a', 'S', '\x2', '\x2', '\x474', 
		'\x49D', '\x3', '\x2', '\x2', '\x2', '\x475', '\x476', '\a', ',', '\x2', 
		'\x2', '\x476', '\x477', '\x5', '\xBE', '`', '\x2', '\x477', '\x478', 
		'\x5', '\x9C', 'O', '\x2', '\x478', '\x49D', '\x3', '\x2', '\x2', '\x2', 
		'\x479', '\x47B', '\a', '&', '\x2', '\x2', '\x47A', '\x47C', '\x5', '\xC4', 
		'\x63', '\x2', '\x47B', '\x47A', '\x3', '\x2', '\x2', '\x2', '\x47B', 
		'\x47C', '\x3', '\x2', '\x2', '\x2', '\x47C', '\x47D', '\x3', '\x2', '\x2', 
		'\x2', '\x47D', '\x49D', '\a', 'V', '\x2', '\x2', '\x47E', '\x47F', '\a', 
		'.', '\x2', '\x2', '\x47F', '\x480', '\x5', '\xC4', '\x63', '\x2', '\x480', 
		'\x481', '\a', 'V', '\x2', '\x2', '\x481', '\x49D', '\x3', '\x2', '\x2', 
		'\x2', '\x482', '\x484', '\a', '\x6', '\x2', '\x2', '\x483', '\x485', 
		'\x5', '\xA2', 'R', '\x2', '\x484', '\x483', '\x3', '\x2', '\x2', '\x2', 
		'\x484', '\x485', '\x3', '\x2', '\x2', '\x2', '\x485', '\x486', '\x3', 
		'\x2', '\x2', '\x2', '\x486', '\x49D', '\a', 'V', '\x2', '\x2', '\x487', 
		'\x489', '\a', '\r', '\x2', '\x2', '\x488', '\x48A', '\x5', '\xA2', 'R', 
		'\x2', '\x489', '\x488', '\x3', '\x2', '\x2', '\x2', '\x489', '\x48A', 
		'\x3', '\x2', '\x2', '\x2', '\x48A', '\x48B', '\x3', '\x2', '\x2', '\x2', 
		'\x48B', '\x49D', '\a', 'V', '\x2', '\x2', '\x48C', '\x48D', '\a', '@', 
		'\x2', '\x2', '\x48D', '\x48E', '\x5', '\xC4', '\x63', '\x2', '\x48E', 
		'\x48F', '\a', 'V', '\x2', '\x2', '\x48F', '\x49D', '\x3', '\x2', '\x2', 
		'\x2', '\x490', '\x49D', '\a', 'V', '\x2', '\x2', '\x491', '\x492', '\x5', 
		'\xC4', '\x63', '\x2', '\x492', '\x493', '\a', 'V', '\x2', '\x2', '\x493', 
		'\x49D', '\x3', '\x2', '\x2', '\x2', '\x494', '\x496', '\x5', '\xD0', 
		'i', '\x2', '\x495', '\x497', '\a', 'V', '\x2', '\x2', '\x496', '\x495', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x497', '\x3', '\x2', '\x2', '\x2', 
		'\x497', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x498', '\x499', '\x5', 
		'\xA2', 'R', '\x2', '\x499', '\x49A', '\a', '_', '\x2', '\x2', '\x49A', 
		'\x49B', '\x5', '\xA6', 'T', '\x2', '\x49B', '\x49D', '\x3', '\x2', '\x2', 
		'\x2', '\x49C', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x42C', 
		'\x3', '\x2', '\x2', '\x2', '\x49C', '\x434', '\x3', '\x2', '\x2', '\x2', 
		'\x49C', '\x43B', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x441', '\x3', 
		'\x2', '\x2', '\x2', '\x49C', '\x445', '\x3', '\x2', '\x2', '\x2', '\x49C', 
		'\x44B', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x458', '\x3', '\x2', '\x2', 
		'\x2', '\x49C', '\x464', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x475', 
		'\x3', '\x2', '\x2', '\x2', '\x49C', '\x479', '\x3', '\x2', '\x2', '\x2', 
		'\x49C', '\x47E', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x482', '\x3', 
		'\x2', '\x2', '\x2', '\x49C', '\x487', '\x3', '\x2', '\x2', '\x2', '\x49C', 
		'\x48C', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x490', '\x3', '\x2', '\x2', 
		'\x2', '\x49C', '\x491', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x494', 
		'\x3', '\x2', '\x2', '\x2', '\x49C', '\x498', '\x3', '\x2', '\x2', '\x2', 
		'\x49D', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x49E', '\x49F', '\a', '\t', 
		'\x2', '\x2', '\x49F', '\x4A3', '\a', 'P', '\x2', '\x2', '\x4A0', '\x4A2', 
		'\x5', '\xE', '\b', '\x2', '\x4A1', '\x4A0', '\x3', '\x2', '\x2', '\x2', 
		'\x4A2', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4A3', '\x4A1', '\x3', 
		'\x2', '\x2', '\x2', '\x4A3', '\x4A4', '\x3', '\x2', '\x2', '\x2', '\x4A4', 
		'\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A3', '\x3', '\x2', '\x2', 
		'\x2', '\x4A6', '\x4A7', '\x5', '\xAA', 'V', '\x2', '\x4A7', '\x4A8', 
		'\x5', '\xA2', 'R', '\x2', '\x4A8', '\x4A9', '\a', 'Q', '\x2', '\x2', 
		'\x4A9', '\x4AA', '\x5', '\x9C', 'O', '\x2', '\x4AA', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\x4AB', '\x4B0', '\x5', '\x66', '\x34', '\x2', '\x4AC', 
		'\x4AD', '\a', 'm', '\x2', '\x2', '\x4AD', '\x4AF', '\x5', '\x66', '\x34', 
		'\x2', '\x4AE', '\x4AC', '\x3', '\x2', '\x2', '\x2', '\x4AF', '\x4B2', 
		'\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4AE', '\x3', '\x2', '\x2', '\x2', 
		'\x4B0', '\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4B1', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\x4B2', '\x4B0', '\x3', '\x2', '\x2', '\x2', '\x4B3', 
		'\x4B4', '\a', '\x15', '\x2', '\x2', '\x4B4', '\x4B5', '\x5', '\x9C', 
		'O', '\x2', '\x4B5', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x4B7', 
		'\a', 'P', '\x2', '\x2', '\x4B7', '\x4B9', '\x5', '\xB0', 'Y', '\x2', 
		'\x4B8', '\x4BA', '\a', 'V', '\x2', '\x2', '\x4B9', '\x4B8', '\x3', '\x2', 
		'\x2', '\x2', '\x4B9', '\x4BA', '\x3', '\x2', '\x2', '\x2', '\x4BA', '\x4BB', 
		'\x3', '\x2', '\x2', '\x2', '\x4BB', '\x4BC', '\a', 'Q', '\x2', '\x2', 
		'\x4BC', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x4BD', '\x4C2', '\x5', 
		'\xB2', 'Z', '\x2', '\x4BE', '\x4BF', '\a', 'V', '\x2', '\x2', '\x4BF', 
		'\x4C1', '\x5', '\xB2', 'Z', '\x2', '\x4C0', '\x4BE', '\x3', '\x2', '\x2', 
		'\x2', '\x4C1', '\x4C4', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C0', 
		'\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C3', '\x3', '\x2', '\x2', '\x2', 
		'\x4C3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4C2', '\x3', 
		'\x2', '\x2', '\x2', '\x4C5', '\x4C7', '\x5', '\xE', '\b', '\x2', '\x4C6', 
		'\x4C5', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x4CA', '\x3', '\x2', '\x2', 
		'\x2', '\x4C8', '\x4C6', '\x3', '\x2', '\x2', '\x2', '\x4C8', '\x4C9', 
		'\x3', '\x2', '\x2', '\x2', '\x4C9', '\x4D0', '\x3', '\x2', '\x2', '\x2', 
		'\x4CA', '\x4C8', '\x3', '\x2', '\x2', '\x2', '\x4CB', '\x4CC', '\x5', 
		'R', '*', '\x2', '\x4CC', '\x4CD', '\x5', 'L', '\'', '\x2', '\x4CD', '\x4D1', 
		'\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4CF', '\a', '?', '\x2', '\x2', 
		'\x4CF', '\x4D1', '\x5', '\xA2', 'R', '\x2', '\x4D0', '\x4CB', '\x3', 
		'\x2', '\x2', '\x2', '\x4D0', '\x4CE', '\x3', '\x2', '\x2', '\x2', '\x4D1', 
		'\x4D2', '\x3', '\x2', '\x2', '\x2', '\x4D2', '\x4D3', '\a', 'Y', '\x2', 
		'\x2', '\x4D3', '\x4D4', '\x5', '\xC4', '\x63', '\x2', '\x4D4', '\x4D7', 
		'\x3', '\x2', '\x2', '\x2', '\x4D5', '\x4D7', '\x5', '\xA2', 'R', '\x2', 
		'\x4D6', '\x4C8', '\x3', '\x2', '\x2', '\x2', '\x4D6', '\x4D5', '\x3', 
		'\x2', '\x2', '\x2', '\x4D7', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x4D8', 
		'\x4DA', '\x5', '\xB6', '\\', '\x2', '\x4D9', '\x4D8', '\x3', '\x2', '\x2', 
		'\x2', '\x4DA', '\x4DB', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4D9', 
		'\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4DC', '\x3', '\x2', '\x2', '\x2', 
		'\x4DC', '\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4DD', '\x4DF', '\x5', 
		'\x9E', 'P', '\x2', '\x4DE', '\x4DD', '\x3', '\x2', '\x2', '\x2', '\x4DF', 
		'\x4E0', '\x3', '\x2', '\x2', '\x2', '\x4E0', '\x4DE', '\x3', '\x2', '\x2', 
		'\x2', '\x4E0', '\x4E1', '\x3', '\x2', '\x2', '\x2', '\x4E1', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E8', '\a', '\b', '\x2', '\x2', 
		'\x4E3', '\x4E9', '\x5', '\xC4', '\x63', '\x2', '\x4E4', '\x4E9', '\a', 
		'\x82', '\x2', '\x2', '\x4E5', '\x4E6', '\x5', '\xEE', 'x', '\x2', '\x4E6', 
		'\x4E7', '\x5', '\xA2', 'R', '\x2', '\x4E7', '\x4E9', '\x3', '\x2', '\x2', 
		'\x2', '\x4E8', '\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4E8', '\x4E4', 
		'\x3', '\x2', '\x2', '\x2', '\x4E8', '\x4E5', '\x3', '\x2', '\x2', '\x2', 
		'\x4E9', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4EA', '\x4EE', '\a', 
		'_', '\x2', '\x2', '\x4EB', '\x4EC', '\a', '\xE', '\x2', '\x2', '\x4EC', 
		'\x4EE', '\a', '_', '\x2', '\x2', '\x4ED', '\x4E2', '\x3', '\x2', '\x2', 
		'\x2', '\x4ED', '\x4EB', '\x3', '\x2', '\x2', '\x2', '\x4EE', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\x4EF', '\x4FC', '\x5', '\xBC', '_', '\x2', 
		'\x4F0', '\x4F2', '\x5', '\xBA', '^', '\x2', '\x4F1', '\x4F0', '\x3', 
		'\x2', '\x2', '\x2', '\x4F1', '\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4F2', 
		'\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4F3', '\x4F5', '\a', 'V', '\x2', 
		'\x2', '\x4F4', '\x4F6', '\x5', '\xC4', '\x63', '\x2', '\x4F5', '\x4F4', 
		'\x3', '\x2', '\x2', '\x2', '\x4F5', '\x4F6', '\x3', '\x2', '\x2', '\x2', 
		'\x4F6', '\x4F7', '\x3', '\x2', '\x2', '\x2', '\x4F7', '\x4F9', '\a', 
		'V', '\x2', '\x2', '\x4F8', '\x4FA', '\x5', '\xC0', '\x61', '\x2', '\x4F9', 
		'\x4F8', '\x3', '\x2', '\x2', '\x2', '\x4F9', '\x4FA', '\x3', '\x2', '\x2', 
		'\x2', '\x4FA', '\x4FC', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4EF', 
		'\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4F1', '\x3', '\x2', '\x2', '\x2', 
		'\x4FC', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x4FD', '\x500', '\x5', 
		'\xA0', 'Q', '\x2', '\x4FE', '\x500', '\x5', '\xC0', '\x61', '\x2', '\x4FF', 
		'\x4FD', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x4FE', '\x3', '\x2', '\x2', 
		'\x2', '\x500', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x501', '\x503', 
		'\x5', '\xE', '\b', '\x2', '\x502', '\x501', '\x3', '\x2', '\x2', '\x2', 
		'\x503', '\x506', '\x3', '\x2', '\x2', '\x2', '\x504', '\x502', '\x3', 
		'\x2', '\x2', '\x2', '\x504', '\x505', '\x3', '\x2', '\x2', '\x2', '\x505', 
		'\x509', '\x3', '\x2', '\x2', '\x2', '\x506', '\x504', '\x3', '\x2', '\x2', 
		'\x2', '\x507', '\x50A', '\x5', '\xEE', 'x', '\x2', '\x508', '\x50A', 
		'\a', '?', '\x2', '\x2', '\x509', '\x507', '\x3', '\x2', '\x2', '\x2', 
		'\x509', '\x508', '\x3', '\x2', '\x2', '\x2', '\x50A', '\x50B', '\x3', 
		'\x2', '\x2', '\x2', '\x50B', '\x50C', '\x5', 'L', '\'', '\x2', '\x50C', 
		'\x50D', '\a', '_', '\x2', '\x2', '\x50D', '\x50E', '\x5', '\xC4', '\x63', 
		'\x2', '\x50E', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x50F', '\x510', 
		'\a', 'P', '\x2', '\x2', '\x510', '\x511', '\x5', '\xC4', '\x63', '\x2', 
		'\x511', '\x512', '\a', 'Q', '\x2', '\x2', '\x512', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\x513', '\x518', '\x5', '\xC4', '\x63', '\x2', '\x514', 
		'\x515', '\a', 'W', '\x2', '\x2', '\x515', '\x517', '\x5', '\xC4', '\x63', 
		'\x2', '\x516', '\x514', '\x3', '\x2', '\x2', '\x2', '\x517', '\x51A', 
		'\x3', '\x2', '\x2', '\x2', '\x518', '\x516', '\x3', '\x2', '\x2', '\x2', 
		'\x518', '\x519', '\x3', '\x2', '\x2', '\x2', '\x519', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\x51A', '\x518', '\x3', '\x2', '\x2', '\x2', '\x51B', 
		'\x51C', '\x5', '\xA2', 'R', '\x2', '\x51C', '\x51E', '\a', 'P', '\x2', 
		'\x2', '\x51D', '\x51F', '\x5', '\xC0', '\x61', '\x2', '\x51E', '\x51D', 
		'\x3', '\x2', '\x2', '\x2', '\x51E', '\x51F', '\x3', '\x2', '\x2', '\x2', 
		'\x51F', '\x520', '\x3', '\x2', '\x2', '\x2', '\x520', '\x521', '\a', 
		'Q', '\x2', '\x2', '\x521', '\x52F', '\x3', '\x2', '\x2', '\x2', '\x522', 
		'\x523', '\a', '-', '\x2', '\x2', '\x523', '\x525', '\a', 'P', '\x2', 
		'\x2', '\x524', '\x526', '\x5', '\xC0', '\x61', '\x2', '\x525', '\x524', 
		'\x3', '\x2', '\x2', '\x2', '\x525', '\x526', '\x3', '\x2', '\x2', '\x2', 
		'\x526', '\x527', '\x3', '\x2', '\x2', '\x2', '\x527', '\x52F', '\a', 
		'Q', '\x2', '\x2', '\x528', '\x529', '\a', '*', '\x2', '\x2', '\x529', 
		'\x52B', '\a', 'P', '\x2', '\x2', '\x52A', '\x52C', '\x5', '\xC0', '\x61', 
		'\x2', '\x52B', '\x52A', '\x3', '\x2', '\x2', '\x2', '\x52B', '\x52C', 
		'\x3', '\x2', '\x2', '\x2', '\x52C', '\x52D', '\x3', '\x2', '\x2', '\x2', 
		'\x52D', '\x52F', '\a', 'Q', '\x2', '\x2', '\x52E', '\x51B', '\x3', '\x2', 
		'\x2', '\x2', '\x52E', '\x522', '\x3', '\x2', '\x2', '\x2', '\x52E', '\x528', 
		'\x3', '\x2', '\x2', '\x2', '\x52F', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\x530', '\x531', '\b', '\x63', '\x1', '\x2', '\x531', '\x55E', '\x5', 
		'\xCE', 'h', '\x2', '\x532', '\x55E', '\x5', '\xC2', '\x62', '\x2', '\x533', 
		'\x534', '\a', '!', '\x2', '\x2', '\x534', '\x55E', '\x5', '\xDA', 'n', 
		'\x2', '\x535', '\x539', '\a', 'P', '\x2', '\x2', '\x536', '\x538', '\x5', 
		'p', '\x39', '\x2', '\x537', '\x536', '\x3', '\x2', '\x2', '\x2', '\x538', 
		'\x53B', '\x3', '\x2', '\x2', '\x2', '\x539', '\x537', '\x3', '\x2', '\x2', 
		'\x2', '\x539', '\x53A', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x53C', 
		'\x3', '\x2', '\x2', '\x2', '\x53B', '\x539', '\x3', '\x2', '\x2', '\x2', 
		'\x53C', '\x541', '\x5', '\xEE', 'x', '\x2', '\x53D', '\x53E', '\a', 'l', 
		'\x2', '\x2', '\x53E', '\x540', '\x5', '\xEE', 'x', '\x2', '\x53F', '\x53D', 
		'\x3', '\x2', '\x2', '\x2', '\x540', '\x543', '\x3', '\x2', '\x2', '\x2', 
		'\x541', '\x53F', '\x3', '\x2', '\x2', '\x2', '\x541', '\x542', '\x3', 
		'\x2', '\x2', '\x2', '\x542', '\x544', '\x3', '\x2', '\x2', '\x2', '\x543', 
		'\x541', '\x3', '\x2', '\x2', '\x2', '\x544', '\x545', '\a', 'Q', '\x2', 
		'\x2', '\x545', '\x546', '\x5', '\xC4', '\x63', '\x18', '\x546', '\x55E', 
		'\x3', '\x2', '\x2', '\x2', '\x547', '\x548', '\t', '\a', '\x2', '\x2', 
		'\x548', '\x55E', '\x5', '\xC4', '\x63', '\x16', '\x549', '\x54A', '\t', 
		'\b', '\x2', '\x2', '\x54A', '\x55E', '\x5', '\xC4', '\x63', '\x15', '\x54B', 
		'\x55E', '\x5', '\xC8', '\x65', '\x2', '\x54C', '\x55E', '\x5', '\xD0', 
		'i', '\x2', '\x54D', '\x54E', '\x5', '\xEE', 'x', '\x2', '\x54E', '\x554', 
		'\a', '|', '\x2', '\x2', '\x54F', '\x551', '\x5', '\xF2', 'z', '\x2', 
		'\x550', '\x54F', '\x3', '\x2', '\x2', '\x2', '\x550', '\x551', '\x3', 
		'\x2', '\x2', '\x2', '\x551', '\x552', '\x3', '\x2', '\x2', '\x2', '\x552', 
		'\x555', '\x5', '\xA2', 'R', '\x2', '\x553', '\x555', '\a', '!', '\x2', 
		'\x2', '\x554', '\x550', '\x3', '\x2', '\x2', '\x2', '\x554', '\x553', 
		'\x3', '\x2', '\x2', '\x2', '\x555', '\x55E', '\x3', '\x2', '\x2', '\x2', 
		'\x556', '\x557', '\x5', '\xD8', 'm', '\x2', '\x557', '\x559', '\a', '|', 
		'\x2', '\x2', '\x558', '\x55A', '\x5', '\xF2', 'z', '\x2', '\x559', '\x558', 
		'\x3', '\x2', '\x2', '\x2', '\x559', '\x55A', '\x3', '\x2', '\x2', '\x2', 
		'\x55A', '\x55B', '\x3', '\x2', '\x2', '\x2', '\x55B', '\x55C', '\a', 
		'!', '\x2', '\x2', '\x55C', '\x55E', '\x3', '\x2', '\x2', '\x2', '\x55D', 
		'\x530', '\x3', '\x2', '\x2', '\x2', '\x55D', '\x532', '\x3', '\x2', '\x2', 
		'\x2', '\x55D', '\x533', '\x3', '\x2', '\x2', '\x2', '\x55D', '\x535', 
		'\x3', '\x2', '\x2', '\x2', '\x55D', '\x547', '\x3', '\x2', '\x2', '\x2', 
		'\x55D', '\x549', '\x3', '\x2', '\x2', '\x2', '\x55D', '\x54B', '\x3', 
		'\x2', '\x2', '\x2', '\x55D', '\x54C', '\x3', '\x2', '\x2', '\x2', '\x55D', 
		'\x54D', '\x3', '\x2', '\x2', '\x2', '\x55D', '\x556', '\x3', '\x2', '\x2', 
		'\x2', '\x55E', '\x5B2', '\x3', '\x2', '\x2', '\x2', '\x55F', '\x560', 
		'\f', '\x14', '\x2', '\x2', '\x560', '\x561', '\t', '\t', '\x2', '\x2', 
		'\x561', '\x5B1', '\x5', '\xC4', '\x63', '\x15', '\x562', '\x563', '\f', 
		'\x13', '\x2', '\x2', '\x563', '\x564', '\t', '\n', '\x2', '\x2', '\x564', 
		'\x5B1', '\x5', '\xC4', '\x63', '\x14', '\x565', '\x56D', '\f', '\x12', 
		'\x2', '\x2', '\x566', '\x567', '\a', '[', '\x2', '\x2', '\x567', '\x56E', 
		'\a', '[', '\x2', '\x2', '\x568', '\x569', '\a', 'Z', '\x2', '\x2', '\x569', 
		'\x56A', '\a', 'Z', '\x2', '\x2', '\x56A', '\x56E', '\a', 'Z', '\x2', 
		'\x2', '\x56B', '\x56C', '\a', 'Z', '\x2', '\x2', '\x56C', '\x56E', '\a', 
		'Z', '\x2', '\x2', '\x56D', '\x566', '\x3', '\x2', '\x2', '\x2', '\x56D', 
		'\x568', '\x3', '\x2', '\x2', '\x2', '\x56D', '\x56B', '\x3', '\x2', '\x2', 
		'\x2', '\x56E', '\x56F', '\x3', '\x2', '\x2', '\x2', '\x56F', '\x5B1', 
		'\x5', '\xC4', '\x63', '\x13', '\x570', '\x571', '\f', '\x11', '\x2', 
		'\x2', '\x571', '\x572', '\t', '\v', '\x2', '\x2', '\x572', '\x5B1', '\x5', 
		'\xC4', '\x63', '\x12', '\x573', '\x574', '\f', '\xF', '\x2', '\x2', '\x574', 
		'\x575', '\t', '\f', '\x2', '\x2', '\x575', '\x5B1', '\x5', '\xC4', '\x63', 
		'\x10', '\x576', '\x577', '\f', '\xE', '\x2', '\x2', '\x577', '\x578', 
		'\a', 'l', '\x2', '\x2', '\x578', '\x5B1', '\x5', '\xC4', '\x63', '\xF', 
		'\x579', '\x57A', '\f', '\r', '\x2', '\x2', '\x57A', '\x57B', '\a', 'n', 
		'\x2', '\x2', '\x57B', '\x5B1', '\x5', '\xC4', '\x63', '\xE', '\x57C', 
		'\x57D', '\f', '\f', '\x2', '\x2', '\x57D', '\x57E', '\a', 'm', '\x2', 
		'\x2', '\x57E', '\x5B1', '\x5', '\xC4', '\x63', '\r', '\x57F', '\x580', 
		'\f', '\v', '\x2', '\x2', '\x580', '\x581', '\a', '\x64', '\x2', '\x2', 
		'\x581', '\x5B1', '\x5', '\xC4', '\x63', '\f', '\x582', '\x583', '\f', 
		'\n', '\x2', '\x2', '\x583', '\x584', '\a', '\x65', '\x2', '\x2', '\x584', 
		'\x5B1', '\x5', '\xC4', '\x63', '\v', '\x585', '\x586', '\f', '\t', '\x2', 
		'\x2', '\x586', '\x587', '\a', '^', '\x2', '\x2', '\x587', '\x588', '\x5', 
		'\xC4', '\x63', '\x2', '\x588', '\x589', '\a', '_', '\x2', '\x2', '\x589', 
		'\x58A', '\x5', '\xC4', '\x63', '\t', '\x58A', '\x5B1', '\x3', '\x2', 
		'\x2', '\x2', '\x58B', '\x58C', '\f', '\b', '\x2', '\x2', '\x58C', '\x58D', 
		'\t', '\r', '\x2', '\x2', '\x58D', '\x5B1', '\x5', '\xC4', '\x63', '\b', 
		'\x58E', '\x58F', '\f', '\x1C', '\x2', '\x2', '\x58F', '\x59B', '\a', 
		'X', '\x2', '\x2', '\x590', '\x59C', '\x5', '\xA2', 'R', '\x2', '\x591', 
		'\x59C', '\x5', '\xC2', '\x62', '\x2', '\x592', '\x59C', '\a', '-', '\x2', 
		'\x2', '\x593', '\x595', '\a', '!', '\x2', '\x2', '\x594', '\x596', '\x5', 
		'\xEA', 'v', '\x2', '\x595', '\x594', '\x3', '\x2', '\x2', '\x2', '\x595', 
		'\x596', '\x3', '\x2', '\x2', '\x2', '\x596', '\x597', '\x3', '\x2', '\x2', 
		'\x2', '\x597', '\x59C', '\x5', '\xDE', 'p', '\x2', '\x598', '\x599', 
		'\a', '*', '\x2', '\x2', '\x599', '\x59C', '\x5', '\xF4', '{', '\x2', 
		'\x59A', '\x59C', '\x5', '\xE4', 's', '\x2', '\x59B', '\x590', '\x3', 
		'\x2', '\x2', '\x2', '\x59B', '\x591', '\x3', '\x2', '\x2', '\x2', '\x59B', 
		'\x592', '\x3', '\x2', '\x2', '\x2', '\x59B', '\x593', '\x3', '\x2', '\x2', 
		'\x2', '\x59B', '\x598', '\x3', '\x2', '\x2', '\x2', '\x59B', '\x59A', 
		'\x3', '\x2', '\x2', '\x2', '\x59C', '\x5B1', '\x3', '\x2', '\x2', '\x2', 
		'\x59D', '\x59E', '\f', '\x1B', '\x2', '\x2', '\x59E', '\x59F', '\a', 
		'T', '\x2', '\x2', '\x59F', '\x5A0', '\x5', '\xC4', '\x63', '\x2', '\x5A0', 
		'\x5A1', '\a', 'U', '\x2', '\x2', '\x5A1', '\x5B1', '\x3', '\x2', '\x2', 
		'\x2', '\x5A2', '\x5A3', '\f', '\x17', '\x2', '\x2', '\x5A3', '\x5B1', 
		'\t', '\xE', '\x2', '\x2', '\x5A4', '\x5A5', '\f', '\x10', '\x2', '\x2', 
		'\x5A5', '\x5A8', '\a', '\x1C', '\x2', '\x2', '\x5A6', '\x5A9', '\x5', 
		'\xEE', 'x', '\x2', '\x5A7', '\x5A9', '\x5', '\xC6', '\x64', '\x2', '\x5A8', 
		'\x5A6', '\x3', '\x2', '\x2', '\x2', '\x5A8', '\x5A7', '\x3', '\x2', '\x2', 
		'\x2', '\x5A9', '\x5B1', '\x3', '\x2', '\x2', '\x2', '\x5AA', '\x5AB', 
		'\f', '\x5', '\x2', '\x2', '\x5AB', '\x5AD', '\a', '|', '\x2', '\x2', 
		'\x5AC', '\x5AE', '\x5', '\xF2', 'z', '\x2', '\x5AD', '\x5AC', '\x3', 
		'\x2', '\x2', '\x2', '\x5AD', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5AE', 
		'\x5AF', '\x3', '\x2', '\x2', '\x2', '\x5AF', '\x5B1', '\x5', '\xA2', 
		'R', '\x2', '\x5B0', '\x55F', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x562', 
		'\x3', '\x2', '\x2', '\x2', '\x5B0', '\x565', '\x3', '\x2', '\x2', '\x2', 
		'\x5B0', '\x570', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x573', '\x3', 
		'\x2', '\x2', '\x2', '\x5B0', '\x576', '\x3', '\x2', '\x2', '\x2', '\x5B0', 
		'\x579', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x57C', '\x3', '\x2', '\x2', 
		'\x2', '\x5B0', '\x57F', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x582', 
		'\x3', '\x2', '\x2', '\x2', '\x5B0', '\x585', '\x3', '\x2', '\x2', '\x2', 
		'\x5B0', '\x58B', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x58E', '\x3', 
		'\x2', '\x2', '\x2', '\x5B0', '\x59D', '\x3', '\x2', '\x2', '\x2', '\x5B0', 
		'\x5A2', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x5A4', '\x3', '\x2', '\x2', 
		'\x2', '\x5B0', '\x5AA', '\x3', '\x2', '\x2', '\x2', '\x5B1', '\x5B4', 
		'\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5B0', '\x3', '\x2', '\x2', '\x2', 
		'\x5B2', '\x5B3', '\x3', '\x2', '\x2', '\x2', '\x5B3', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\x5B4', '\x5B2', '\x3', '\x2', '\x2', '\x2', '\x5B5', 
		'\x5B7', '\x5', '\xE', '\b', '\x2', '\x5B6', '\x5B5', '\x3', '\x2', '\x2', 
		'\x2', '\x5B7', '\x5BA', '\x3', '\x2', '\x2', '\x2', '\x5B8', '\x5B6', 
		'\x3', '\x2', '\x2', '\x2', '\x5B8', '\x5B9', '\x3', '\x2', '\x2', '\x2', 
		'\x5B9', '\x5BB', '\x3', '\x2', '\x2', '\x2', '\x5BA', '\x5B8', '\x3', 
		'\x2', '\x2', '\x2', '\x5BB', '\x5BF', '\x5', '\xEE', 'x', '\x2', '\x5BC', 
		'\x5BE', '\x5', 'p', '\x39', '\x2', '\x5BD', '\x5BC', '\x3', '\x2', '\x2', 
		'\x2', '\x5BE', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5BF', '\x5BD', 
		'\x3', '\x2', '\x2', '\x2', '\x5BF', '\x5C0', '\x3', '\x2', '\x2', '\x2', 
		'\x5C0', '\x5C2', '\x3', '\x2', '\x2', '\x2', '\x5C1', '\x5BF', '\x3', 
		'\x2', '\x2', '\x2', '\x5C2', '\x5C3', '\x5', '\xA2', 'R', '\x2', '\x5C3', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\x5C4', '\x5C5', '\x5', '\xCA', '\x66', 
		'\x2', '\x5C5', '\x5C6', '\a', '{', '\x2', '\x2', '\x5C6', '\x5C7', '\x5', 
		'\xCC', 'g', '\x2', '\x5C7', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x5C8', 
		'\x5DF', '\x5', '\xA2', 'R', '\x2', '\x5C9', '\x5CB', '\a', 'P', '\x2', 
		'\x2', '\x5CA', '\x5CC', '\x5', '\\', '/', '\x2', '\x5CB', '\x5CA', '\x3', 
		'\x2', '\x2', '\x2', '\x5CB', '\x5CC', '\x3', '\x2', '\x2', '\x2', '\x5CC', 
		'\x5CD', '\x3', '\x2', '\x2', '\x2', '\x5CD', '\x5DF', '\a', 'Q', '\x2', 
		'\x2', '\x5CE', '\x5CF', '\a', 'P', '\x2', '\x2', '\x5CF', '\x5D4', '\x5', 
		'\xA2', 'R', '\x2', '\x5D0', '\x5D1', '\a', 'W', '\x2', '\x2', '\x5D1', 
		'\x5D3', '\x5', '\xA2', 'R', '\x2', '\x5D2', '\x5D0', '\x3', '\x2', '\x2', 
		'\x2', '\x5D3', '\x5D6', '\x3', '\x2', '\x2', '\x2', '\x5D4', '\x5D2', 
		'\x3', '\x2', '\x2', '\x2', '\x5D4', '\x5D5', '\x3', '\x2', '\x2', '\x2', 
		'\x5D5', '\x5D7', '\x3', '\x2', '\x2', '\x2', '\x5D6', '\x5D4', '\x3', 
		'\x2', '\x2', '\x2', '\x5D7', '\x5D8', '\a', 'Q', '\x2', '\x2', '\x5D8', 
		'\x5DF', '\x3', '\x2', '\x2', '\x2', '\x5D9', '\x5DB', '\a', 'P', '\x2', 
		'\x2', '\x5DA', '\x5DC', '\x5', '\x62', '\x32', '\x2', '\x5DB', '\x5DA', 
		'\x3', '\x2', '\x2', '\x2', '\x5DB', '\x5DC', '\x3', '\x2', '\x2', '\x2', 
		'\x5DC', '\x5DD', '\x3', '\x2', '\x2', '\x2', '\x5DD', '\x5DF', '\a', 
		'Q', '\x2', '\x2', '\x5DE', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5DE', 
		'\x5C9', '\x3', '\x2', '\x2', '\x2', '\x5DE', '\x5CE', '\x3', '\x2', '\x2', 
		'\x2', '\x5DE', '\x5D9', '\x3', '\x2', '\x2', '\x2', '\x5DF', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\x5E0', '\x5E3', '\x5', '\xC4', '\x63', '\x2', 
		'\x5E1', '\x5E3', '\x5', '\x9C', 'O', '\x2', '\x5E2', '\x5E0', '\x3', 
		'\x2', '\x2', '\x2', '\x5E2', '\x5E1', '\x3', '\x2', '\x2', '\x2', '\x5E3', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\x5E4', '\x5E5', '\a', 'P', '\x2', 
		'\x2', '\x5E5', '\x5E6', '\x5', '\xC4', '\x63', '\x2', '\x5E6', '\x5E7', 
		'\a', 'Q', '\x2', '\x2', '\x5E7', '\x5F7', '\x3', '\x2', '\x2', '\x2', 
		'\x5E8', '\x5F7', '\a', '-', '\x2', '\x2', '\x5E9', '\x5F7', '\a', '*', 
		'\x2', '\x2', '\x5EA', '\x5F7', '\x5', 'h', '\x35', '\x2', '\x5EB', '\x5F7', 
		'\x5', '\xA2', 'R', '\x2', '\x5EC', '\x5ED', '\x5', '.', '\x18', '\x2', 
		'\x5ED', '\x5EE', '\a', 'X', '\x2', '\x2', '\x5EE', '\x5EF', '\a', '\v', 
		'\x2', '\x2', '\x5EF', '\x5F7', '\x3', '\x2', '\x2', '\x2', '\x5F0', '\x5F4', 
		'\x5', '\xEA', 'v', '\x2', '\x5F1', '\x5F5', '\x5', '\xF6', '|', '\x2', 
		'\x5F2', '\x5F3', '\a', '-', '\x2', '\x2', '\x5F3', '\x5F5', '\x5', '\xF8', 
		'}', '\x2', '\x5F4', '\x5F1', '\x3', '\x2', '\x2', '\x2', '\x5F4', '\x5F2', 
		'\x3', '\x2', '\x2', '\x2', '\x5F5', '\x5F7', '\x3', '\x2', '\x2', '\x2', 
		'\x5F6', '\x5E4', '\x3', '\x2', '\x2', '\x2', '\x5F6', '\x5E8', '\x3', 
		'\x2', '\x2', '\x2', '\x5F6', '\x5E9', '\x3', '\x2', '\x2', '\x2', '\x5F6', 
		'\x5EA', '\x3', '\x2', '\x2', '\x2', '\x5F6', '\x5EB', '\x3', '\x2', '\x2', 
		'\x2', '\x5F6', '\x5EC', '\x3', '\x2', '\x2', '\x2', '\x5F6', '\x5F0', 
		'\x3', '\x2', '\x2', '\x2', '\x5F7', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\x5F8', '\x5F9', '\a', '+', '\x2', '\x2', '\x5F9', '\x5FA', '\x5', '\xBE', 
		'`', '\x2', '\x5FA', '\x5FE', '\a', 'R', '\x2', '\x2', '\x5FB', '\x5FD', 
		'\x5', '\xD2', 'j', '\x2', '\x5FC', '\x5FB', '\x3', '\x2', '\x2', '\x2', 
		'\x5FD', '\x600', '\x3', '\x2', '\x2', '\x2', '\x5FE', '\x5FC', '\x3', 
		'\x2', '\x2', '\x2', '\x5FE', '\x5FF', '\x3', '\x2', '\x2', '\x2', '\x5FF', 
		'\x601', '\x3', '\x2', '\x2', '\x2', '\x600', '\x5FE', '\x3', '\x2', '\x2', 
		'\x2', '\x601', '\x602', '\a', 'S', '\x2', '\x2', '\x602', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\x603', '\x607', '\a', '\b', '\x2', '\x2', '\x604', 
		'\x608', '\x5', '\xC0', '\x61', '\x2', '\x605', '\x608', '\a', 'O', '\x2', 
		'\x2', '\x606', '\x608', '\x5', '\xD4', 'k', '\x2', '\x607', '\x604', 
		'\x3', '\x2', '\x2', '\x2', '\x607', '\x605', '\x3', '\x2', '\x2', '\x2', 
		'\x607', '\x606', '\x3', '\x2', '\x2', '\x2', '\x608', '\x609', '\x3', 
		'\x2', '\x2', '\x2', '\x609', '\x60A', '\t', '\xF', '\x2', '\x2', '\x60A', 
		'\x60F', '\x5', '\xD6', 'l', '\x2', '\x60B', '\x60C', '\a', '\xE', '\x2', 
		'\x2', '\x60C', '\x60D', '\t', '\xF', '\x2', '\x2', '\x60D', '\x60F', 
		'\x5', '\xD6', 'l', '\x2', '\x60E', '\x603', '\x3', '\x2', '\x2', '\x2', 
		'\x60E', '\x60B', '\x3', '\x2', '\x2', '\x2', '\x60F', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\x610', '\x611', '\b', 'k', '\x1', '\x2', '\x611', 
		'\x612', '\a', 'P', '\x2', '\x2', '\x612', '\x613', '\x5', '\xD4', 'k', 
		'\x2', '\x613', '\x614', '\a', 'Q', '\x2', '\x2', '\x614', '\x62B', '\x3', 
		'\x2', '\x2', '\x2', '\x615', '\x617', '\x5', '\xE', '\b', '\x2', '\x616', 
		'\x615', '\x3', '\x2', '\x2', '\x2', '\x617', '\x61A', '\x3', '\x2', '\x2', 
		'\x2', '\x618', '\x616', '\x3', '\x2', '\x2', '\x2', '\x618', '\x619', 
		'\x3', '\x2', '\x2', '\x2', '\x619', '\x61B', '\x3', '\x2', '\x2', '\x2', 
		'\x61A', '\x618', '\x3', '\x2', '\x2', '\x2', '\x61B', '\x61F', '\x5', 
		'\xEE', 'x', '\x2', '\x61C', '\x61E', '\x5', 'p', '\x39', '\x2', '\x61D', 
		'\x61C', '\x3', '\x2', '\x2', '\x2', '\x61E', '\x621', '\x3', '\x2', '\x2', 
		'\x2', '\x61F', '\x61D', '\x3', '\x2', '\x2', '\x2', '\x61F', '\x620', 
		'\x3', '\x2', '\x2', '\x2', '\x620', '\x622', '\x3', '\x2', '\x2', '\x2', 
		'\x621', '\x61F', '\x3', '\x2', '\x2', '\x2', '\x622', '\x627', '\x5', 
		'\xA2', 'R', '\x2', '\x623', '\x624', '\a', '\x64', '\x2', '\x2', '\x624', 
		'\x626', '\x5', '\xC4', '\x63', '\x2', '\x625', '\x623', '\x3', '\x2', 
		'\x2', '\x2', '\x626', '\x629', '\x3', '\x2', '\x2', '\x2', '\x627', '\x625', 
		'\x3', '\x2', '\x2', '\x2', '\x627', '\x628', '\x3', '\x2', '\x2', '\x2', 
		'\x628', '\x62B', '\x3', '\x2', '\x2', '\x2', '\x629', '\x627', '\x3', 
		'\x2', '\x2', '\x2', '\x62A', '\x610', '\x3', '\x2', '\x2', '\x2', '\x62A', 
		'\x618', '\x3', '\x2', '\x2', '\x2', '\x62B', '\x631', '\x3', '\x2', '\x2', 
		'\x2', '\x62C', '\x62D', '\f', '\x3', '\x2', '\x2', '\x62D', '\x62E', 
		'\a', '\x64', '\x2', '\x2', '\x62E', '\x630', '\x5', '\xC4', '\x63', '\x2', 
		'\x62F', '\x62C', '\x3', '\x2', '\x2', '\x2', '\x630', '\x633', '\x3', 
		'\x2', '\x2', '\x2', '\x631', '\x62F', '\x3', '\x2', '\x2', '\x2', '\x631', 
		'\x632', '\x3', '\x2', '\x2', '\x2', '\x632', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\x633', '\x631', '\x3', '\x2', '\x2', '\x2', '\x634', '\x63C', 
		'\x5', '\x9C', 'O', '\x2', '\x635', '\x637', '\x5', '\x9E', 'P', '\x2', 
		'\x636', '\x635', '\x3', '\x2', '\x2', '\x2', '\x637', '\x63A', '\x3', 
		'\x2', '\x2', '\x2', '\x638', '\x636', '\x3', '\x2', '\x2', '\x2', '\x638', 
		'\x639', '\x3', '\x2', '\x2', '\x2', '\x639', '\x63C', '\x3', '\x2', '\x2', 
		'\x2', '\x63A', '\x638', '\x3', '\x2', '\x2', '\x2', '\x63B', '\x634', 
		'\x3', '\x2', '\x2', '\x2', '\x63B', '\x638', '\x3', '\x2', '\x2', '\x2', 
		'\x63C', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x63D', '\x63E', '\x5', 
		'R', '*', '\x2', '\x63E', '\x63F', '\a', 'X', '\x2', '\x2', '\x63F', '\x641', 
		'\x3', '\x2', '\x2', '\x2', '\x640', '\x63D', '\x3', '\x2', '\x2', '\x2', 
		'\x640', '\x641', '\x3', '\x2', '\x2', '\x2', '\x641', '\x645', '\x3', 
		'\x2', '\x2', '\x2', '\x642', '\x644', '\x5', 'p', '\x39', '\x2', '\x643', 
		'\x642', '\x3', '\x2', '\x2', '\x2', '\x644', '\x647', '\x3', '\x2', '\x2', 
		'\x2', '\x645', '\x643', '\x3', '\x2', '\x2', '\x2', '\x645', '\x646', 
		'\x3', '\x2', '\x2', '\x2', '\x646', '\x648', '\x3', '\x2', '\x2', '\x2', 
		'\x647', '\x645', '\x3', '\x2', '\x2', '\x2', '\x648', '\x64A', '\x5', 
		'\xA2', 'R', '\x2', '\x649', '\x64B', '\x5', '\xF2', 'z', '\x2', '\x64A', 
		'\x649', '\x3', '\x2', '\x2', '\x2', '\x64A', '\x64B', '\x3', '\x2', '\x2', 
		'\x2', '\x64B', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x64C', '\x64D', 
		'\x5', '\xEA', 'v', '\x2', '\x64D', '\x64E', '\x5', '\xDC', 'o', '\x2', 
		'\x64E', '\x64F', '\x5', '\xE2', 'r', '\x2', '\x64F', '\x656', '\x3', 
		'\x2', '\x2', '\x2', '\x650', '\x653', '\x5', '\xDC', 'o', '\x2', '\x651', 
		'\x654', '\x5', '\xE0', 'q', '\x2', '\x652', '\x654', '\x5', '\xE2', 'r', 
		'\x2', '\x653', '\x651', '\x3', '\x2', '\x2', '\x2', '\x653', '\x652', 
		'\x3', '\x2', '\x2', '\x2', '\x654', '\x656', '\x3', '\x2', '\x2', '\x2', 
		'\x655', '\x64C', '\x3', '\x2', '\x2', '\x2', '\x655', '\x650', '\x3', 
		'\x2', '\x2', '\x2', '\x656', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x657', 
		'\x659', '\x5', '\xA2', 'R', '\x2', '\x658', '\x65A', '\x5', '\xE6', 't', 
		'\x2', '\x659', '\x658', '\x3', '\x2', '\x2', '\x2', '\x659', '\x65A', 
		'\x3', '\x2', '\x2', '\x2', '\x65A', '\x662', '\x3', '\x2', '\x2', '\x2', 
		'\x65B', '\x65C', '\a', 'X', '\x2', '\x2', '\x65C', '\x65E', '\x5', '\xA2', 
		'R', '\x2', '\x65D', '\x65F', '\x5', '\xE6', 't', '\x2', '\x65E', '\x65D', 
		'\x3', '\x2', '\x2', '\x2', '\x65E', '\x65F', '\x3', '\x2', '\x2', '\x2', 
		'\x65F', '\x661', '\x3', '\x2', '\x2', '\x2', '\x660', '\x65B', '\x3', 
		'\x2', '\x2', '\x2', '\x661', '\x664', '\x3', '\x2', '\x2', '\x2', '\x662', 
		'\x660', '\x3', '\x2', '\x2', '\x2', '\x662', '\x663', '\x3', '\x2', '\x2', 
		'\x2', '\x663', '\x667', '\x3', '\x2', '\x2', '\x2', '\x664', '\x662', 
		'\x3', '\x2', '\x2', '\x2', '\x665', '\x667', '\x5', '\xF0', 'y', '\x2', 
		'\x666', '\x657', '\x3', '\x2', '\x2', '\x2', '\x666', '\x665', '\x3', 
		'\x2', '\x2', '\x2', '\x667', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x668', 
		'\x66A', '\x5', '\xA2', 'R', '\x2', '\x669', '\x66B', '\x5', '\xE8', 'u', 
		'\x2', '\x66A', '\x669', '\x3', '\x2', '\x2', '\x2', '\x66A', '\x66B', 
		'\x3', '\x2', '\x2', '\x2', '\x66B', '\x66C', '\x3', '\x2', '\x2', '\x2', 
		'\x66C', '\x66D', '\x5', '\xE2', 'r', '\x2', '\x66D', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\x66E', '\x68A', '\a', 'T', '\x2', '\x2', '\x66F', '\x674', 
		'\a', 'U', '\x2', '\x2', '\x670', '\x671', '\a', 'T', '\x2', '\x2', '\x671', 
		'\x673', '\a', 'U', '\x2', '\x2', '\x672', '\x670', '\x3', '\x2', '\x2', 
		'\x2', '\x673', '\x676', '\x3', '\x2', '\x2', '\x2', '\x674', '\x672', 
		'\x3', '\x2', '\x2', '\x2', '\x674', '\x675', '\x3', '\x2', '\x2', '\x2', 
		'\x675', '\x677', '\x3', '\x2', '\x2', '\x2', '\x676', '\x674', '\x3', 
		'\x2', '\x2', '\x2', '\x677', '\x68B', '\x5', 'P', ')', '\x2', '\x678', 
		'\x679', '\x5', '\xC4', '\x63', '\x2', '\x679', '\x680', '\a', 'U', '\x2', 
		'\x2', '\x67A', '\x67B', '\a', 'T', '\x2', '\x2', '\x67B', '\x67C', '\x5', 
		'\xC4', '\x63', '\x2', '\x67C', '\x67D', '\a', 'U', '\x2', '\x2', '\x67D', 
		'\x67F', '\x3', '\x2', '\x2', '\x2', '\x67E', '\x67A', '\x3', '\x2', '\x2', 
		'\x2', '\x67F', '\x682', '\x3', '\x2', '\x2', '\x2', '\x680', '\x67E', 
		'\x3', '\x2', '\x2', '\x2', '\x680', '\x681', '\x3', '\x2', '\x2', '\x2', 
		'\x681', '\x687', '\x3', '\x2', '\x2', '\x2', '\x682', '\x680', '\x3', 
		'\x2', '\x2', '\x2', '\x683', '\x684', '\a', 'T', '\x2', '\x2', '\x684', 
		'\x686', '\a', 'U', '\x2', '\x2', '\x685', '\x683', '\x3', '\x2', '\x2', 
		'\x2', '\x686', '\x689', '\x3', '\x2', '\x2', '\x2', '\x687', '\x685', 
		'\x3', '\x2', '\x2', '\x2', '\x687', '\x688', '\x3', '\x2', '\x2', '\x2', 
		'\x688', '\x68B', '\x3', '\x2', '\x2', '\x2', '\x689', '\x687', '\x3', 
		'\x2', '\x2', '\x2', '\x68A', '\x66F', '\x3', '\x2', '\x2', '\x2', '\x68A', 
		'\x678', '\x3', '\x2', '\x2', '\x2', '\x68B', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\x68C', '\x68E', '\x5', '\xF8', '}', '\x2', '\x68D', '\x68F', 
		'\x5', '\"', '\x12', '\x2', '\x68E', '\x68D', '\x3', '\x2', '\x2', '\x2', 
		'\x68E', '\x68F', '\x3', '\x2', '\x2', '\x2', '\x68F', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\x690', '\x691', '\x5', '\xEA', 'v', '\x2', '\x691', 
		'\x692', '\x5', '\xF6', '|', '\x2', '\x692', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\x693', '\x694', '\a', '[', '\x2', '\x2', '\x694', '\x697', '\a', 
		'Z', '\x2', '\x2', '\x695', '\x697', '\x5', '\xF2', 'z', '\x2', '\x696', 
		'\x693', '\x3', '\x2', '\x2', '\x2', '\x696', '\x695', '\x3', '\x2', '\x2', 
		'\x2', '\x697', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x698', '\x699', 
		'\a', '[', '\x2', '\x2', '\x699', '\x69C', '\a', 'Z', '\x2', '\x2', '\x69A', 
		'\x69C', '\x5', '\xEA', 'v', '\x2', '\x69B', '\x698', '\x3', '\x2', '\x2', 
		'\x2', '\x69B', '\x69A', '\x3', '\x2', '\x2', '\x2', '\x69C', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\x69D', '\x69E', '\a', '[', '\x2', '\x2', 
		'\x69E', '\x69F', '\x5', '\xEC', 'w', '\x2', '\x69F', '\x6A0', '\a', 'Z', 
		'\x2', '\x2', '\x6A0', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x6A1', '\x6A6', 
		'\x5', '\xEE', 'x', '\x2', '\x6A2', '\x6A3', '\a', 'W', '\x2', '\x2', 
		'\x6A3', '\x6A5', '\x5', '\xEE', 'x', '\x2', '\x6A4', '\x6A2', '\x3', 
		'\x2', '\x2', '\x2', '\x6A5', '\x6A8', '\x3', '\x2', '\x2', '\x2', '\x6A6', 
		'\x6A4', '\x3', '\x2', '\x2', '\x2', '\x6A6', '\x6A7', '\x3', '\x2', '\x2', 
		'\x2', '\x6A7', '\xED', '\x3', '\x2', '\x2', '\x2', '\x6A8', '\x6A6', 
		'\x3', '\x2', '\x2', '\x2', '\x6A9', '\x6AB', '\x5', 'p', '\x39', '\x2', 
		'\x6AA', '\x6A9', '\x3', '\x2', '\x2', '\x2', '\x6AB', '\x6AE', '\x3', 
		'\x2', '\x2', '\x2', '\x6AC', '\x6AA', '\x3', '\x2', '\x2', '\x2', '\x6AC', 
		'\x6AD', '\x3', '\x2', '\x2', '\x2', '\x6AD', '\x6B1', '\x3', '\x2', '\x2', 
		'\x2', '\x6AE', '\x6AC', '\x3', '\x2', '\x2', '\x2', '\x6AF', '\x6B2', 
		'\x5', 'R', '*', '\x2', '\x6B0', '\x6B2', '\x5', '\xF0', 'y', '\x2', '\x6B1', 
		'\x6AF', '\x3', '\x2', '\x2', '\x2', '\x6B1', '\x6B0', '\x3', '\x2', '\x2', 
		'\x2', '\x6B2', '\x6BD', '\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6B5', 
		'\x5', 'p', '\x39', '\x2', '\x6B4', '\x6B3', '\x3', '\x2', '\x2', '\x2', 
		'\x6B5', '\x6B8', '\x3', '\x2', '\x2', '\x2', '\x6B6', '\x6B4', '\x3', 
		'\x2', '\x2', '\x2', '\x6B6', '\x6B7', '\x3', '\x2', '\x2', '\x2', '\x6B7', 
		'\x6B9', '\x3', '\x2', '\x2', '\x2', '\x6B8', '\x6B6', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x6BA', '\a', 'T', '\x2', '\x2', '\x6BA', '\x6BC', '\a', 
		'U', '\x2', '\x2', '\x6BB', '\x6B6', '\x3', '\x2', '\x2', '\x2', '\x6BC', 
		'\x6BF', '\x3', '\x2', '\x2', '\x2', '\x6BD', '\x6BB', '\x3', '\x2', '\x2', 
		'\x2', '\x6BD', '\x6BE', '\x3', '\x2', '\x2', '\x2', '\x6BE', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\x6BF', '\x6BD', '\x3', '\x2', '\x2', '\x2', 
		'\x6C0', '\x6C1', '\t', '\x10', '\x2', '\x2', '\x6C1', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\x6C2', '\x6C3', '\a', '[', '\x2', '\x2', '\x6C3', 
		'\x6C8', '\x5', 'T', '+', '\x2', '\x6C4', '\x6C5', '\a', 'W', '\x2', '\x2', 
		'\x6C5', '\x6C7', '\x5', 'T', '+', '\x2', '\x6C6', '\x6C4', '\x3', '\x2', 
		'\x2', '\x2', '\x6C7', '\x6CA', '\x3', '\x2', '\x2', '\x2', '\x6C8', '\x6C6', 
		'\x3', '\x2', '\x2', '\x2', '\x6C8', '\x6C9', '\x3', '\x2', '\x2', '\x2', 
		'\x6C9', '\x6CB', '\x3', '\x2', '\x2', '\x2', '\x6CA', '\x6C8', '\x3', 
		'\x2', '\x2', '\x2', '\x6CB', '\x6CC', '\a', 'Z', '\x2', '\x2', '\x6CC', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\x6CD', '\x6D7', '\x5', '\xF8', '}', 
		'\x2', '\x6CE', '\x6D0', '\a', 'X', '\x2', '\x2', '\x6CF', '\x6D1', '\x5', 
		'\xF2', 'z', '\x2', '\x6D0', '\x6CF', '\x3', '\x2', '\x2', '\x2', '\x6D0', 
		'\x6D1', '\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6D2', '\x3', '\x2', '\x2', 
		'\x2', '\x6D2', '\x6D4', '\x5', '\xA2', 'R', '\x2', '\x6D3', '\x6D5', 
		'\x5', '\xF8', '}', '\x2', '\x6D4', '\x6D3', '\x3', '\x2', '\x2', '\x2', 
		'\x6D4', '\x6D5', '\x3', '\x2', '\x2', '\x2', '\x6D5', '\x6D7', '\x3', 
		'\x2', '\x2', '\x2', '\x6D6', '\x6CD', '\x3', '\x2', '\x2', '\x2', '\x6D6', 
		'\x6CE', '\x3', '\x2', '\x2', '\x2', '\x6D7', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\x6D8', '\x6D9', '\a', '*', '\x2', '\x2', '\x6D9', '\x6DE', '\x5', 
		'\xF4', '{', '\x2', '\x6DA', '\x6DB', '\x5', '\xA2', 'R', '\x2', '\x6DB', 
		'\x6DC', '\x5', '\xF8', '}', '\x2', '\x6DC', '\x6DE', '\x3', '\x2', '\x2', 
		'\x2', '\x6DD', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\x6DD', '\x6DA', 
		'\x3', '\x2', '\x2', '\x2', '\x6DE', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\x6DF', '\x6E1', '\a', 'P', '\x2', '\x2', '\x6E0', '\x6E2', '\x5', '\xC0', 
		'\x61', '\x2', '\x6E1', '\x6E0', '\x3', '\x2', '\x2', '\x2', '\x6E1', 
		'\x6E2', '\x3', '\x2', '\x2', '\x2', '\x6E2', '\x6E3', '\x3', '\x2', '\x2', 
		'\x2', '\x6E3', '\x6E4', '\a', 'Q', '\x2', '\x2', '\x6E4', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xFB', '\x100', '\x106', '\x10C', '\x111', 
		'\x11A', '\x11F', '\x126', '\x12E', '\x131', '\x138', '\x144', '\x148', 
		'\x14D', '\x151', '\x155', '\x159', '\x163', '\x16B', '\x173', '\x177', 
		'\x17E', '\x185', '\x189', '\x18C', '\x18F', '\x198', '\x19E', '\x1A3', 
		'\x1A6', '\x1AC', '\x1B2', '\x1B6', '\x1BA', '\x1C2', '\x1CB', '\x1D2', 
		'\x1D8', '\x1DC', '\x1E8', '\x1F1', '\x1F6', '\x1FC', '\x200', '\x20C', 
		'\x217', '\x21C', '\x226', '\x22E', '\x238', '\x241', '\x24C', '\x251', 
		'\x25A', '\x264', '\x269', '\x272', '\x278', '\x27F', '\x284', '\x28C', 
		'\x290', '\x292', '\x298', '\x29D', '\x2A1', '\x2A8', '\x2AE', '\x2B0', 
		'\x2B7', '\x2BC', '\x2C1', '\x2C4', '\x2C6', '\x2D0', '\x2DA', '\x2DF', 
		'\x2E2', '\x2E7', '\x2F0', '\x2F7', '\x302', '\x308', '\x313', '\x31D', 
		'\x328', '\x331', '\x336', '\x339', '\x340', '\x34A', '\x352', '\x355', 
		'\x358', '\x365', '\x36D', '\x372', '\x37A', '\x37E', '\x382', '\x386', 
		'\x38A', '\x38C', '\x390', '\x396', '\x39E', '\x3A8', '\x3B1', '\x3BB', 
		'\x3C3', '\x3D1', '\x3D8', '\x3DD', '\x3E3', '\x3EC', '\x3F6', '\x3FF', 
		'\x409', '\x40E', '\x419', '\x420', '\x426', '\x429', '\x430', '\x439', 
		'\x450', '\x453', '\x456', '\x45E', '\x462', '\x46A', '\x470', '\x47B', 
		'\x484', '\x489', '\x496', '\x49C', '\x4A3', '\x4B0', '\x4B9', '\x4C2', 
		'\x4C8', '\x4D0', '\x4D6', '\x4DB', '\x4E0', '\x4E8', '\x4ED', '\x4F1', 
		'\x4F5', '\x4F9', '\x4FB', '\x4FF', '\x504', '\x509', '\x518', '\x51E', 
		'\x525', '\x52B', '\x52E', '\x539', '\x541', '\x550', '\x554', '\x559', 
		'\x55D', '\x56D', '\x595', '\x59B', '\x5A8', '\x5AD', '\x5B0', '\x5B2', 
		'\x5B8', '\x5BF', '\x5CB', '\x5D4', '\x5DB', '\x5DE', '\x5E2', '\x5F4', 
		'\x5F6', '\x5FE', '\x607', '\x60E', '\x618', '\x61F', '\x627', '\x62A', 
		'\x631', '\x638', '\x63B', '\x640', '\x645', '\x64A', '\x653', '\x655', 
		'\x659', '\x65E', '\x662', '\x666', '\x66A', '\x674', '\x680', '\x687', 
		'\x68A', '\x68E', '\x696', '\x69B', '\x6A6', '\x6AC', '\x6B1', '\x6B6', 
		'\x6BD', '\x6C8', '\x6D0', '\x6D4', '\x6D6', '\x6DD', '\x6E1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
